
Stop_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001074  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011ec  080011ec  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080011ec  080011ec  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011ec  080011ec  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011ec  080011ec  000111ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080011f4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000008  080011fc  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080011fc  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ff9  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000087d  00000000  00000000  0002106d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  000218f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000173  00000000  00000000  00021b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001894  00000000  00000000  00021c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014e8  00000000  00000000  0002350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005698  00000000  00000000  000249f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005e0  00000000  00000000  0002a090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	0800118c 	.word	0x0800118c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	0800118c 	.word	0x0800118c

08000170 <Stop_Watch_Init>:
		n=n*10+k;

	}
}*/

void Stop_Watch_Init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	Seg_Init();
 8000174:	f000 fbfe 	bl	8000974 <Seg_Init>
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}

0800017c <STOPWATCH_EnterTimeValue>:
	sec--;
}


static void STOPWATCH_EnterTimeValue(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	static u8 digits[4]={0,0,0,0};
	if(edit_state == edit_secs && key>='0' && key<='9' )
 8000180:	4b4c      	ldr	r3, [pc, #304]	; (80002b4 <STOPWATCH_EnterTimeValue+0x138>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d143      	bne.n	8000210 <STOPWATCH_EnterTimeValue+0x94>
 8000188:	4b4b      	ldr	r3, [pc, #300]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b2f      	cmp	r3, #47	; 0x2f
 800018e:	d93f      	bls.n	8000210 <STOPWATCH_EnterTimeValue+0x94>
 8000190:	4b49      	ldr	r3, [pc, #292]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b39      	cmp	r3, #57	; 0x39
 8000196:	d83b      	bhi.n	8000210 <STOPWATCH_EnterTimeValue+0x94>
	{
		if(c==0)
 8000198:	4b48      	ldr	r3, [pc, #288]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d114      	bne.n	80001ca <STOPWATCH_EnterTimeValue+0x4e>
		{
			digits[3]=key-'0';
 80001a0:	4b45      	ldr	r3, [pc, #276]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	3b30      	subs	r3, #48	; 0x30
 80001a6:	b2da      	uxtb	r2, r3
 80001a8:	4b45      	ldr	r3, [pc, #276]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 80001aa:	70da      	strb	r2, [r3, #3]
			sec_set_value=digits[3];
 80001ac:	4b44      	ldr	r3, [pc, #272]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 80001ae:	78da      	ldrb	r2, [r3, #3]
 80001b0:	4b44      	ldr	r3, [pc, #272]	; (80002c4 <STOPWATCH_EnterTimeValue+0x148>)
 80001b2:	701a      	strb	r2, [r3, #0]
			sec=sec_set_value;
 80001b4:	4b43      	ldr	r3, [pc, #268]	; (80002c4 <STOPWATCH_EnterTimeValue+0x148>)
 80001b6:	781a      	ldrb	r2, [r3, #0]
 80001b8:	4b43      	ldr	r3, [pc, #268]	; (80002c8 <STOPWATCH_EnterTimeValue+0x14c>)
 80001ba:	701a      	strb	r2, [r3, #0]
			c++;
 80001bc:	4b3f      	ldr	r3, [pc, #252]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	b2da      	uxtb	r2, r3
 80001c4:	4b3d      	ldr	r3, [pc, #244]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 80001c6:	701a      	strb	r2, [r3, #0]
		if(c==0)
 80001c8:	e066      	b.n	8000298 <STOPWATCH_EnterTimeValue+0x11c>
		}
		else if(c==1)
 80001ca:	4b3c      	ldr	r3, [pc, #240]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d162      	bne.n	8000298 <STOPWATCH_EnterTimeValue+0x11c>
		{
			if(key<='5')   					//to not enter more than 60 in seconds digits
 80001d2:	4b39      	ldr	r3, [pc, #228]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b35      	cmp	r3, #53	; 0x35
 80001d8:	d85e      	bhi.n	8000298 <STOPWATCH_EnterTimeValue+0x11c>
			{
				digits[2]=key-'0';
 80001da:	4b37      	ldr	r3, [pc, #220]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	3b30      	subs	r3, #48	; 0x30
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b37      	ldr	r3, [pc, #220]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 80001e4:	709a      	strb	r2, [r3, #2]
				sec_set_value=sec_set_value+(digits[2]*10);
 80001e6:	4b36      	ldr	r3, [pc, #216]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 80001e8:	789b      	ldrb	r3, [r3, #2]
 80001ea:	461a      	mov	r2, r3
 80001ec:	0092      	lsls	r2, r2, #2
 80001ee:	4413      	add	r3, r2
 80001f0:	005b      	lsls	r3, r3, #1
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	4b33      	ldr	r3, [pc, #204]	; (80002c4 <STOPWATCH_EnterTimeValue+0x148>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	4413      	add	r3, r2
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b31      	ldr	r3, [pc, #196]	; (80002c4 <STOPWATCH_EnterTimeValue+0x148>)
 80001fe:	701a      	strb	r2, [r3, #0]
				sec=sec_set_value;
 8000200:	4b30      	ldr	r3, [pc, #192]	; (80002c4 <STOPWATCH_EnterTimeValue+0x148>)
 8000202:	781a      	ldrb	r2, [r3, #0]
 8000204:	4b30      	ldr	r3, [pc, #192]	; (80002c8 <STOPWATCH_EnterTimeValue+0x14c>)
 8000206:	701a      	strb	r2, [r3, #0]
				c=0;
 8000208:	4b2c      	ldr	r3, [pc, #176]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
		if(c==0)
 800020e:	e043      	b.n	8000298 <STOPWATCH_EnterTimeValue+0x11c>
			}
		}
	}
	else if(edit_state == edit_minuts && key>='0' && key<='9' )
 8000210:	4b28      	ldr	r3, [pc, #160]	; (80002b4 <STOPWATCH_EnterTimeValue+0x138>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d140      	bne.n	800029a <STOPWATCH_EnterTimeValue+0x11e>
 8000218:	4b27      	ldr	r3, [pc, #156]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b2f      	cmp	r3, #47	; 0x2f
 800021e:	d93c      	bls.n	800029a <STOPWATCH_EnterTimeValue+0x11e>
 8000220:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b39      	cmp	r3, #57	; 0x39
 8000226:	d838      	bhi.n	800029a <STOPWATCH_EnterTimeValue+0x11e>
	{
		if(c==0)
 8000228:	4b24      	ldr	r3, [pc, #144]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d114      	bne.n	800025a <STOPWATCH_EnterTimeValue+0xde>
		{
			digits[1]=key-'0';
 8000230:	4b21      	ldr	r3, [pc, #132]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	3b30      	subs	r3, #48	; 0x30
 8000236:	b2da      	uxtb	r2, r3
 8000238:	4b21      	ldr	r3, [pc, #132]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 800023a:	705a      	strb	r2, [r3, #1]
			minute_set_value=digits[1];
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 800023e:	785a      	ldrb	r2, [r3, #1]
 8000240:	4b22      	ldr	r3, [pc, #136]	; (80002cc <STOPWATCH_EnterTimeValue+0x150>)
 8000242:	701a      	strb	r2, [r3, #0]
			min=minute_set_value;
 8000244:	4b21      	ldr	r3, [pc, #132]	; (80002cc <STOPWATCH_EnterTimeValue+0x150>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <STOPWATCH_EnterTimeValue+0x154>)
 800024a:	701a      	strb	r2, [r3, #0]
			c++;
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b19      	ldr	r3, [pc, #100]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 8000256:	701a      	strb	r2, [r3, #0]
 8000258:	e01f      	b.n	800029a <STOPWATCH_EnterTimeValue+0x11e>
		}
		else if(c==1)
 800025a:	4b18      	ldr	r3, [pc, #96]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d11b      	bne.n	800029a <STOPWATCH_EnterTimeValue+0x11e>
		{
			digits[0]=key-'0';
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <STOPWATCH_EnterTimeValue+0x13c>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	3b30      	subs	r3, #48	; 0x30
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 800026c:	701a      	strb	r2, [r3, #0]
			minute_set_value=minute_set_value+(digits[0]*10);
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <STOPWATCH_EnterTimeValue+0x144>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	461a      	mov	r2, r3
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	4413      	add	r3, r2
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	b2da      	uxtb	r2, r3
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <STOPWATCH_EnterTimeValue+0x150>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4413      	add	r3, r2
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <STOPWATCH_EnterTimeValue+0x150>)
 8000286:	701a      	strb	r2, [r3, #0]
			min=minute_set_value;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <STOPWATCH_EnterTimeValue+0x150>)
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <STOPWATCH_EnterTimeValue+0x154>)
 800028e:	701a      	strb	r2, [r3, #0]
			c=0;
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <STOPWATCH_EnterTimeValue+0x140>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	e000      	b.n	800029a <STOPWATCH_EnterTimeValue+0x11e>
		if(c==0)
 8000298:	bf00      	nop
		}
	}
	seg_mins (min);
 800029a:	4b0d      	ldr	r3, [pc, #52]	; (80002d0 <STOPWATCH_EnterTimeValue+0x154>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fba0 	bl	80009e4 <seg_mins>
	seg_sec (sec);
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <STOPWATCH_EnterTimeValue+0x14c>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fbeb 	bl	8000a84 <seg_sec>
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000002 	.word	0x20000002
 80002b8:	20000000 	.word	0x20000000
 80002bc:	20000028 	.word	0x20000028
 80002c0:	2000002c 	.word	0x2000002c
 80002c4:	20000026 	.word	0x20000026
 80002c8:	20000024 	.word	0x20000024
 80002cc:	20000027 	.word	0x20000027
 80002d0:	20000025 	.word	0x20000025

080002d4 <STOPWATCH_Edit_Time>:


static void STOPWATCH_Edit_Time(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	static u8 sw_flag1=0,sw_flag2=1,editflag=1;
		if(GPIO_u8GetPinValue(PORTB, MINUTE_EDIT_BUTTON)==GPIO_HIGH)
 80002d8:	2108      	movs	r1, #8
 80002da:	2001      	movs	r0, #1
 80002dc:	f000 fd46 	bl	8000d6c <GPIO_u8GetPinValue>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d114      	bne.n	8000310 <STOPWATCH_Edit_Time+0x3c>
		{
			if(sw_flag1==0)
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <STOPWATCH_Edit_Time+0xa4>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d113      	bne.n	8000316 <STOPWATCH_Edit_Time+0x42>
			{
				sw_flag1=1;
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <STOPWATCH_Edit_Time+0xa4>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
				edit_state=edit_minuts;
 80002f4:	4b21      	ldr	r3, [pc, #132]	; (800037c <STOPWATCH_Edit_Time+0xa8>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
				c=0;
 80002fa:	4b21      	ldr	r3, [pc, #132]	; (8000380 <STOPWATCH_Edit_Time+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	701a      	strb	r2, [r3, #0]
				LCD_GoTo(1,0);
 8000300:	2100      	movs	r1, #0
 8000302:	2001      	movs	r0, #1
 8000304:	f000 faa6 	bl	8000854 <LCD_GoTo>
				LCD_SendString("-enter minutes");
 8000308:	481e      	ldr	r0, [pc, #120]	; (8000384 <STOPWATCH_Edit_Time+0xb0>)
 800030a:	f000 f99d 	bl	8000648 <LCD_SendString>
 800030e:	e002      	b.n	8000316 <STOPWATCH_Edit_Time+0x42>
			}
		}
		else
		{
			sw_flag1=0;
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <STOPWATCH_Edit_Time+0xa4>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
		}
		if(GPIO_u8GetPinValue(PORTB, SECONDS_EDIT_BUTTON)==GPIO_HIGH)
 8000316:	2109      	movs	r1, #9
 8000318:	2001      	movs	r0, #1
 800031a:	f000 fd27 	bl	8000d6c <GPIO_u8GetPinValue>
 800031e:	4603      	mov	r3, r0
 8000320:	2b01      	cmp	r3, #1
 8000322:	d114      	bne.n	800034e <STOPWATCH_Edit_Time+0x7a>
		{
			if(sw_flag2==0)
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <STOPWATCH_Edit_Time+0xb4>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d113      	bne.n	8000354 <STOPWATCH_Edit_Time+0x80>
			{
				sw_flag2=1;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <STOPWATCH_Edit_Time+0xb4>)
 800032e:	2201      	movs	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
				edit_state=edit_secs;
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <STOPWATCH_Edit_Time+0xa8>)
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]
				c=0;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <STOPWATCH_Edit_Time+0xac>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
				LCD_GoTo(1,0);
 800033e:	2100      	movs	r1, #0
 8000340:	2001      	movs	r0, #1
 8000342:	f000 fa87 	bl	8000854 <LCD_GoTo>
				LCD_SendString("-enter seconds");
 8000346:	4811      	ldr	r0, [pc, #68]	; (800038c <STOPWATCH_Edit_Time+0xb8>)
 8000348:	f000 f97e 	bl	8000648 <LCD_SendString>
 800034c:	e002      	b.n	8000354 <STOPWATCH_Edit_Time+0x80>
			}
		}
		else
		{
			sw_flag2=0;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <STOPWATCH_Edit_Time+0xb4>)
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
		}
		if(editflag==1)
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <STOPWATCH_Edit_Time+0xbc>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d109      	bne.n	8000370 <STOPWATCH_Edit_Time+0x9c>
		{
			editflag=0;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <STOPWATCH_Edit_Time+0xbc>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
			LCD_GoTo(1,0);
 8000362:	2100      	movs	r1, #0
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fa75 	bl	8000854 <LCD_GoTo>
			LCD_SendString("-enter seconds");
 800036a:	4808      	ldr	r0, [pc, #32]	; (800038c <STOPWATCH_Edit_Time+0xb8>)
 800036c:	f000 f96c 	bl	8000648 <LCD_SendString>
		}
		STOPWATCH_EnterTimeValue();
 8000370:	f7ff ff04 	bl	800017c <STOPWATCH_EnterTimeValue>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000030 	.word	0x20000030
 800037c:	20000002 	.word	0x20000002
 8000380:	20000028 	.word	0x20000028
 8000384:	080011a4 	.word	0x080011a4
 8000388:	20000003 	.word	0x20000003
 800038c:	080011b4 	.word	0x080011b4
 8000390:	20000004 	.word	0x20000004

08000394 <STOPWATCH_START>:



static void STOPWATCH_START(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	edit_state=edit_secs;
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <STOPWATCH_START+0x30>)
 800039a:	2201      	movs	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
	if(current_state==reset_state)
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <STOPWATCH_START+0x34>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d107      	bne.n	80003b6 <STOPWATCH_START+0x22>
	{
		min=minute_set_value;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <STOPWATCH_START+0x38>)
 80003a8:	781a      	ldrb	r2, [r3, #0]
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <STOPWATCH_START+0x3c>)
 80003ac:	701a      	strb	r2, [r3, #0]
		sec=sec_set_value;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <STOPWATCH_START+0x40>)
 80003b0:	781a      	ldrb	r2, [r3, #0]
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <STOPWATCH_START+0x44>)
 80003b4:	701a      	strb	r2, [r3, #0]
	}
	current_state=idle_state;
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <STOPWATCH_START+0x34>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	20000002 	.word	0x20000002
 80003c8:	20000001 	.word	0x20000001
 80003cc:	20000027 	.word	0x20000027
 80003d0:	20000025 	.word	0x20000025
 80003d4:	20000026 	.word	0x20000026
 80003d8:	20000024 	.word	0x20000024

080003dc <Stop_Watch>:


void Stop_Watch(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	key= KeyPad_GetKey();
 80003e0:	f000 f896 	bl	8000510 <KeyPad_GetKey>
 80003e4:	4603      	mov	r3, r0
 80003e6:	461a      	mov	r2, r3
 80003e8:	4b2c      	ldr	r3, [pc, #176]	; (800049c <Stop_Watch+0xc0>)
 80003ea:	701a      	strb	r2, [r3, #0]
	if(key!='N')
 80003ec:	4b2b      	ldr	r3, [pc, #172]	; (800049c <Stop_Watch+0xc0>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b4e      	cmp	r3, #78	; 0x4e
 80003f2:	d019      	beq.n	8000428 <Stop_Watch+0x4c>
	{
		if(key == SET_VALUE_BUTTON) // '0'
 80003f4:	4b29      	ldr	r3, [pc, #164]	; (800049c <Stop_Watch+0xc0>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b30      	cmp	r3, #48	; 0x30
 80003fa:	d106      	bne.n	800040a <Stop_Watch+0x2e>
		{
			key='N';
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <Stop_Watch+0xc0>)
 80003fe:	224e      	movs	r2, #78	; 0x4e
 8000400:	701a      	strb	r2, [r3, #0]
			current_state=edit_time_state;
 8000402:	4b27      	ldr	r3, [pc, #156]	; (80004a0 <Stop_Watch+0xc4>)
 8000404:	2201      	movs	r2, #1
 8000406:	701a      	strb	r2, [r3, #0]
 8000408:	e00e      	b.n	8000428 <Stop_Watch+0x4c>
		}
		else if(key == START_BUTTON)
 800040a:	4b24      	ldr	r3, [pc, #144]	; (800049c <Stop_Watch+0xc0>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b3d      	cmp	r3, #61	; 0x3d
 8000410:	d103      	bne.n	800041a <Stop_Watch+0x3e>
		{
			current_state=start_state;
 8000412:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <Stop_Watch+0xc4>)
 8000414:	2202      	movs	r2, #2
 8000416:	701a      	strb	r2, [r3, #0]
 8000418:	e006      	b.n	8000428 <Stop_Watch+0x4c>
		}
		else if(key == RESET_BUTTON)
 800041a:	4b20      	ldr	r3, [pc, #128]	; (800049c <Stop_Watch+0xc0>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b63      	cmp	r3, #99	; 0x63
 8000420:	d102      	bne.n	8000428 <Stop_Watch+0x4c>
		{
			current_state=reset_state;
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <Stop_Watch+0xc4>)
 8000424:	2203      	movs	r2, #3
 8000426:	701a      	strb	r2, [r3, #0]
		}
	}
	LCD_GoTo(0, 6);
 8000428:	2106      	movs	r1, #6
 800042a:	2000      	movs	r0, #0
 800042c:	f000 fa12 	bl	8000854 <LCD_GoTo>
	switch(current_state)
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <Stop_Watch+0xc4>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d82f      	bhi.n	8000498 <Stop_Watch+0xbc>
 8000438:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <Stop_Watch+0x64>)
 800043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043e:	bf00      	nop
 8000440:	08000451 	.word	0x08000451
 8000444:	08000467 	.word	0x08000467
 8000448:	08000477 	.word	0x08000477
 800044c:	08000493 	.word	0x08000493
	{
	case idle_state:
		 seg_mins (min);
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <Stop_Watch+0xc8>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fac5 	bl	80009e4 <seg_mins>
		seg_sec (sec);
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <Stop_Watch+0xcc>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fb10 	bl	8000a84 <seg_sec>
		break;
 8000464:	e018      	b.n	8000498 <Stop_Watch+0xbc>
	case edit_time_state:
		SYSTICK_Stop();
 8000466:	f000 fded 	bl	8001044 <SYSTICK_Stop>
		LCD_SendString("Paused  ");
 800046a:	4810      	ldr	r0, [pc, #64]	; (80004ac <Stop_Watch+0xd0>)
 800046c:	f000 f8ec 	bl	8000648 <LCD_SendString>
		STOPWATCH_Edit_Time();
 8000470:	f7ff ff30 	bl	80002d4 <STOPWATCH_Edit_Time>
		break;
 8000474:	e010      	b.n	8000498 <Stop_Watch+0xbc>
	case start_state:
		LCD_Clear();
 8000476:	f000 fa1f 	bl	80008b8 <LCD_Clear>
		LCD_GoTo(0, 6);
 800047a:	2106      	movs	r1, #6
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f9e9 	bl	8000854 <LCD_GoTo>
		LCD_SendString("Running ");
 8000482:	480b      	ldr	r0, [pc, #44]	; (80004b0 <Stop_Watch+0xd4>)
 8000484:	f000 f8e0 	bl	8000648 <LCD_SendString>
		STOPWATCH_START();
 8000488:	f7ff ff84 	bl	8000394 <STOPWATCH_START>
		SYSTICK_Start ();
 800048c:	f000 fdca 	bl	8001024 <SYSTICK_Start>
		break;
 8000490:	e002      	b.n	8000498 <Stop_Watch+0xbc>
	case reset_state:
		STOPWATCH_START();
 8000492:	f7ff ff7f 	bl	8000394 <STOPWATCH_START>
		break;
 8000496:	bf00      	nop
	}
}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000000 	.word	0x20000000
 80004a0:	20000001 	.word	0x20000001
 80004a4:	20000025 	.word	0x20000025
 80004a8:	20000024 	.word	0x20000024
 80004ac:	080011c4 	.word	0x080011c4
 80004b0:	080011d0 	.word	0x080011d0

080004b4 <KeyPad_Init>:
const  u8 KeysARR[ROWS][COLS]={{'7','8','9','/'},
                        {'4','5','6','*'},
                        {'1','2','3','-'},
                        {'c','0','=','+'}};
void KeyPad_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	u8 r;
	for (r=0;r<ROWS;r++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	e00e      	b.n	80004de <KeyPad_Init+0x2a>
	{
		GPIO_voidSetPinDirection(KeyPad_Port, r, GPIO_OUTPUT_10MHZ_PP);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 fb2c 	bl	8000b24 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(KeyPad_Port,r,GPIO_HIGH);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fbec 	bl	8000cb0 <GPIO_voidSetPinValue>
	for (r=0;r<ROWS;r++)
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	3301      	adds	r3, #1
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d9ed      	bls.n	80004c0 <KeyPad_Init+0xc>
	}
	for (r=0;r<COLS;r++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	e00a      	b.n	8000500 <KeyPad_Init+0x4c>
		{
			GPIO_voidSetPinDirection(KeyPad_Port, r+4, GPIO_INPUT_PULL_UP_DOWN);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	3304      	adds	r3, #4
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	2208      	movs	r2, #8
 80004f2:	4619      	mov	r1, r3
 80004f4:	2001      	movs	r0, #1
 80004f6:	f000 fb15 	bl	8000b24 <GPIO_voidSetPinDirection>
	for (r=0;r<COLS;r++)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	3301      	adds	r3, #1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d9f1      	bls.n	80004ea <KeyPad_Init+0x36>

		}
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <KeyPad_GetKey>:

u8 KeyPad_GetKey(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
	u8 r,c,key=NO_KEY,NUM=NO_KEY;
 8000516:	234e      	movs	r3, #78	; 0x4e
 8000518:	717b      	strb	r3, [r7, #5]
 800051a:	234e      	movs	r3, #78	; 0x4e
 800051c:	713b      	strb	r3, [r7, #4]
	for (r=0;r<ROWS;r++)
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	e03b      	b.n	800059c <KeyPad_GetKey+0x8c>
	{
		GPIO_voidSetPinValue(KeyPad_Port,r,GPIO_HIGH);
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2201      	movs	r2, #1
 8000528:	4619      	mov	r1, r3
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fbc0 	bl	8000cb0 <GPIO_voidSetPinValue>
		for (c=0;c<COLS;c++)
 8000530:	2300      	movs	r3, #0
 8000532:	71bb      	strb	r3, [r7, #6]
 8000534:	e026      	b.n	8000584 <KeyPad_GetKey+0x74>
		{
			NUM=GPIO_u8GetPinValue(KeyPad_Port,c+4);
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	3304      	adds	r3, #4
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	2001      	movs	r0, #1
 8000540:	f000 fc14 	bl	8000d6c <GPIO_u8GetPinValue>
 8000544:	4603      	mov	r3, r0
 8000546:	713b      	strb	r3, [r7, #4]
			if (NUM==GPIO_HIGH)
 8000548:	793b      	ldrb	r3, [r7, #4]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d117      	bne.n	800057e <KeyPad_GetKey+0x6e>
			{
				key=KeysARR[r][c];
 800054e:	79fa      	ldrb	r2, [r7, #7]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	4916      	ldr	r1, [pc, #88]	; (80005ac <KeyPad_GetKey+0x9c>)
 8000554:	0092      	lsls	r2, r2, #2
 8000556:	440a      	add	r2, r1
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	717b      	strb	r3, [r7, #5]
				delay_ms(10);
 800055e:	200a      	movs	r0, #10
 8000560:	f000 fc7c 	bl	8000e5c <delay_ms>
				while(NUM==GPIO_HIGH){
 8000564:	e008      	b.n	8000578 <KeyPad_GetKey+0x68>
					NUM=GPIO_u8GetPinValue(KeyPad_Port,c+4);
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	3304      	adds	r3, #4
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4619      	mov	r1, r3
 800056e:	2001      	movs	r0, #1
 8000570:	f000 fbfc 	bl	8000d6c <GPIO_u8GetPinValue>
 8000574:	4603      	mov	r3, r0
 8000576:	713b      	strb	r3, [r7, #4]
				while(NUM==GPIO_HIGH){
 8000578:	793b      	ldrb	r3, [r7, #4]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d0f3      	beq.n	8000566 <KeyPad_GetKey+0x56>
		for (c=0;c<COLS;c++)
 800057e:	79bb      	ldrb	r3, [r7, #6]
 8000580:	3301      	adds	r3, #1
 8000582:	71bb      	strb	r3, [r7, #6]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d9d5      	bls.n	8000536 <KeyPad_GetKey+0x26>
				}
			}
		}
		GPIO_voidSetPinValue(KeyPad_Port,r,GPIO_LOW);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fb8d 	bl	8000cb0 <GPIO_voidSetPinValue>
	for (r=0;r<ROWS;r++)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	3301      	adds	r3, #1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b03      	cmp	r3, #3
 80005a0:	d9c0      	bls.n	8000524 <KeyPad_GetKey+0x14>
	}
	return key;
 80005a2:	797b      	ldrb	r3, [r7, #5]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	080011dc 	.word	0x080011dc

080005b0 <LCD_Init>:
static void LCD_SendData(u8 character);



void LCD_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	/* Add your code here */
	/* Initialize Pins */


	for(volatile u8 i = 1 ;i <7 ; i++){
 80005b6:	2301      	movs	r3, #1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	e015      	b.n	80005e8 <LCD_Init+0x38>
		GPIO_voidSetPinDirection(PORTA, i, GPIO_OUTPUT_10MHZ_PP	);
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 faad 	bl	8000b24 <GPIO_voidSetPinDirection>
		delay_ms(5);
 80005ca:	2005      	movs	r0, #5
 80005cc:	f000 fc46 	bl	8000e5c <delay_ms>
        GPIO_voidSetPinValue(PORTA, i, GPIO_HIGH);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fb69 	bl	8000cb0 <GPIO_voidSetPinValue>
	for(volatile u8 i = 1 ;i <7 ; i++){
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	3301      	adds	r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d9e5      	bls.n	80005bc <LCD_Init+0xc>
	/* Clear LCD */

	/* Increment cursor and turn off display shift */

	/* Turn display ON */
	   delay_ms(15);
 80005f0:	200f      	movs	r0, #15
 80005f2:	f000 fc33 	bl	8000e5c <delay_ms>
		LCD_SendCommand(0x02);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 f842 	bl	8000680 <LCD_SendCommand>
		delay_ms(2);
 80005fc:	2002      	movs	r0, #2
 80005fe:	f000 fc2d 	bl	8000e5c <delay_ms>
		LCD_SendCommand(0x28);
 8000602:	2028      	movs	r0, #40	; 0x28
 8000604:	f000 f83c 	bl	8000680 <LCD_SendCommand>
		delay_ms(2);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fc27 	bl	8000e5c <delay_ms>
		LCD_SendCommand(0x0c);
 800060e:	200c      	movs	r0, #12
 8000610:	f000 f836 	bl	8000680 <LCD_SendCommand>
		LCD_SendCommand(0x06);
 8000614:	2006      	movs	r0, #6
 8000616:	f000 f833 	bl	8000680 <LCD_SendCommand>
		LCD_SendCommand(0x01);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 f830 	bl	8000680 <LCD_SendCommand>
		delay_ms(2);
 8000620:	2002      	movs	r0, #2
 8000622:	f000 fc1b 	bl	8000e5c <delay_ms>

	/* End of your code !*/
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <LCD_SendChar>:
void LCD_SendChar(u8 ch)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
	/* Add your code here */
	/* Change position and send character */
	LCD_SendData(ch);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f895 	bl	800076a <LCD_SendData>
	/* End of your code !*/

}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <LCD_SendString>:

void LCD_SendString(char * str)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	u8 i;
	/* Add your code here */
	for (i=0;str[i];i++)
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	e009      	b.n	800066a <LCD_SendString+0x22>
	{
		LCD_SendData(str[i]);
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f883 	bl	800076a <LCD_SendData>
	for (i=0;str[i];i++)
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	3301      	adds	r3, #1
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1ef      	bne.n	8000656 <LCD_SendString+0xe>
	}
	/* Clear screen and send character by character to the LCD */

	/* End of your code !*/
}
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <LCD_SendCommand>:

static void LCD_SendCommand(u8 command)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	u8		GPIO_u8GetPinValue(u8 port, u8 pin);
	void    GPIO_voidSetPortDirection(u8 port, u8 Direction);
//	GPIO_voidSetPortValue(PORTA, (command>>4)&0x000f);
//	GPIO_voidSetPortValue(PORTA, (command)&0x000f);
	/* Add your code here */
	GPIO_voidSetPinValue(RS, GPIO_LOW);
 800068a:	2200      	movs	r2, #0
 800068c:	2105      	movs	r1, #5
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fb0e 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(command,4));
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	091b      	lsrs	r3, r3, #4
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	2101      	movs	r1, #1
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 fb03 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(command,5));
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	095b      	lsrs	r3, r3, #5
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	2102      	movs	r1, #2
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 faf8 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(command,6));
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	099b      	lsrs	r3, r3, #6
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	2103      	movs	r1, #3
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 faed 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(command,7));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	09db      	lsrs	r3, r3, #7
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	2104      	movs	r1, #4
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 fae5 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN,GPIO_HIGH);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2106      	movs	r1, #6
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fae0 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN, GPIO_LOW);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2106      	movs	r1, #6
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 fadb 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(command,0));
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	2101      	movs	r1, #1
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fad2 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(command,1));
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	085b      	lsrs	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	2102      	movs	r1, #2
 800071c:	2000      	movs	r0, #0
 800071e:	f000 fac7 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(command,2));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	089b      	lsrs	r3, r3, #2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	2103      	movs	r1, #3
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fabc 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(command,3));
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	2104      	movs	r1, #4
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fab1 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN, GPIO_HIGH);
 800074e:	2201      	movs	r2, #1
 8000750:	2106      	movs	r1, #6
 8000752:	2000      	movs	r0, #0
 8000754:	f000 faac 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN, GPIO_LOW);
 8000758:	2200      	movs	r2, #0
 800075a:	2106      	movs	r1, #6
 800075c:	2000      	movs	r0, #0
 800075e:	f000 faa7 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	/* End of your code !*/

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <LCD_SendData>:

static void LCD_SendData(u8 character)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	/* Add your code here */
	GPIO_voidSetPinValue(RS,GPIO_HIGH);
 8000774:	2201      	movs	r2, #1
 8000776:	2105      	movs	r1, #5
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fa99 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(character,4));
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b2db      	uxtb	r3, r3
 800078a:	461a      	mov	r2, r3
 800078c:	2101      	movs	r1, #1
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fa8e 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(character,5));
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	2102      	movs	r1, #2
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 fa83 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(character,6));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	099b      	lsrs	r3, r3, #6
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	2103      	movs	r1, #3
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fa78 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(character,7));
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	09db      	lsrs	r3, r3, #7
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	2104      	movs	r1, #4
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fa70 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN,GPIO_HIGH);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2106      	movs	r1, #6
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fa6b 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN,GPIO_LOW);
 80007da:	2200      	movs	r2, #0
 80007dc:	2106      	movs	r1, #6
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 fa66 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(character,0));
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	2101      	movs	r1, #1
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fa5d 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(character,1));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	2102      	movs	r1, #2
 8000806:	2000      	movs	r0, #0
 8000808:	f000 fa52 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(character,2));
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	461a      	mov	r2, r3
 800081a:	2103      	movs	r1, #3
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fa47 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(character,3));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	08db      	lsrs	r3, r3, #3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	461a      	mov	r2, r3
 8000830:	2104      	movs	r1, #4
 8000832:	2000      	movs	r0, #0
 8000834:	f000 fa3c 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN,GPIO_HIGH);
 8000838:	2201      	movs	r2, #1
 800083a:	2106      	movs	r1, #6
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fa37 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN,GPIO_LOW);
 8000842:	2200      	movs	r2, #0
 8000844:	2106      	movs	r1, #6
 8000846:	2000      	movs	r0, #0
 8000848:	f000 fa32 	bl	8000cb0 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	/* End of your code !*/
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <LCD_GoTo>:

void LCD_GoTo(u8 line, u8 column)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	460a      	mov	r2, r1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
	u8 address = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
	/* Calculate address in DDRAM */
	switch(line){
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d819      	bhi.n	80008a2 <LCD_GoTo+0x4e>
 800086e:	a201      	add	r2, pc, #4	; (adr r2, 8000874 <LCD_GoTo+0x20>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000885 	.word	0x08000885
 8000878:	0800088b 	.word	0x0800088b
 800087c:	08000893 	.word	0x08000893
 8000880:	0800089b 	.word	0x0800089b
		case 0: address = (column); break;;
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e00b      	b.n	80008a2 <LCD_GoTo+0x4e>
		case 1: address = (column+0x40); break;;
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	3340      	adds	r3, #64	; 0x40
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e007      	b.n	80008a2 <LCD_GoTo+0x4e>
		case 2: address = (column+0x14); break;;
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	3314      	adds	r3, #20
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e003      	b.n	80008a2 <LCD_GoTo+0x4e>
		case 3: address = (column+0x54); break;;
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	3354      	adds	r3, #84	; 0x54
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	bf00      	nop
	}
	LCD_SendCommand(address|(0x80));
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fee8 	bl	8000680 <LCD_SendCommand>
	/* Send address to LCD */

	/* End of your code !*/

}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <LCD_Clear>:
	}
	LCD_SendCommand(0x80);
}

void LCD_Clear(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	LCD_SendCommand(0x01);
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff fedf 	bl	8000680 <LCD_SendCommand>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <LCD_writeNumber>:
		}
	}
}
*/
void LCD_writeNumber(s32 num)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	u8 str[20];
	u8 i=0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	77fb      	strb	r3, [r7, #31]
	s8 j;
	if(num==0)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d103      	bne.n	80008e2 <LCD_writeNumber+0x1a>
	{
		LCD_SendChar('0');
 80008da:	2030      	movs	r0, #48	; 0x30
 80008dc:	f7ff fea7 	bl	800062e <LCD_SendChar>
 80008e0:	e043      	b.n	800096a <LCD_writeNumber+0xa2>
		return;
	}
	if(num<0)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	da25      	bge.n	8000934 <LCD_writeNumber+0x6c>
	{
		LCD_SendChar('-');
 80008e8:	202d      	movs	r0, #45	; 0x2d
 80008ea:	f7ff fea0 	bl	800062e <LCD_SendChar>
		num=num*(-1);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	425b      	negs	r3, r3
 80008f2:	607b      	str	r3, [r7, #4]
	}
	while(num)
 80008f4:	e01e      	b.n	8000934 <LCD_writeNumber+0x6c>
	{
		str[i]=num%10 +'0';
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <LCD_writeNumber+0xa8>)
 80008fa:	fb83 1302 	smull	r1, r3, r3, r2
 80008fe:	1099      	asrs	r1, r3, #2
 8000900:	17d3      	asrs	r3, r2, #31
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	460b      	mov	r3, r1
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	440b      	add	r3, r1
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	1ad1      	subs	r1, r2, r3
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	7ffb      	ldrb	r3, [r7, #31]
 8000912:	3230      	adds	r2, #48	; 0x30
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	3320      	adds	r3, #32
 8000918:	443b      	add	r3, r7
 800091a:	f803 2c18 	strb.w	r2, [r3, #-24]
		i++;
 800091e:	7ffb      	ldrb	r3, [r7, #31]
 8000920:	3301      	adds	r3, #1
 8000922:	77fb      	strb	r3, [r7, #31]
		num=num/10;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <LCD_writeNumber+0xa8>)
 8000928:	fb82 1203 	smull	r1, r2, r2, r3
 800092c:	1092      	asrs	r2, r2, #2
 800092e:	17db      	asrs	r3, r3, #31
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	607b      	str	r3, [r7, #4]
	while(num)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1dd      	bne.n	80008f6 <LCD_writeNumber+0x2e>
	}
	for(j=i-1;j>=0;j--)
 800093a:	7ffb      	ldrb	r3, [r7, #31]
 800093c:	3b01      	subs	r3, #1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	77bb      	strb	r3, [r7, #30]
 8000942:	e00e      	b.n	8000962 <LCD_writeNumber+0x9a>
	{
		LCD_SendChar(str[j]);
 8000944:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000948:	3320      	adds	r3, #32
 800094a:	443b      	add	r3, r7
 800094c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe6c 	bl	800062e <LCD_SendChar>
	for(j=i-1;j>=0;j--)
 8000956:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	3b01      	subs	r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	77bb      	strb	r3, [r7, #30]
 8000962:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000966:	2b00      	cmp	r3, #0
 8000968:	daec      	bge.n	8000944 <LCD_writeNumber+0x7c>
	}
}
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	66666667 	.word	0x66666667

08000974 <Seg_Init>:
 *
 *  Created on: Nov 11, 2023
 *      Author: Lenovo
 */
#include "Segment.h"
void Seg_Init(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	for(u8 i=0;i<8;i++){
 800097a:	2300      	movs	r3, #0
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	e008      	b.n	8000992 <Seg_Init+0x1e>
	GPIO_voidSetPinDirection(Seg_PORT,i ,GPIO_OUTPUT_10MHZ_PP);
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2201      	movs	r2, #1
 8000984:	4619      	mov	r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	f000 f8cc 	bl	8000b24 <GPIO_voidSetPinDirection>
	for(u8 i=0;i<8;i++){
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	3301      	adds	r3, #1
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b07      	cmp	r3, #7
 8000996:	d9f3      	bls.n	8000980 <Seg_Init+0xc>
	}
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <Display>:
void Display(u8 d){
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
	GPIO_voidSetPortValue(Seg_PORT,GPIO_u16GetPortValue(Seg_PORT)&0xFFF0);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 fa45 	bl	8000e3c <GPIO_u16GetPortValue>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f023 030f 	bic.w	r3, r3, #15
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	2001      	movs	r0, #1
 80009be:	f000 fa13 	bl	8000de8 <GPIO_voidSetPortValue>
	GPIO_voidSetPortValue(Seg_PORT,GPIO_u16GetPortValue(Seg_PORT)| d);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fa3a 	bl	8000e3c <GPIO_u16GetPortValue>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	4619      	mov	r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 fa06 	bl	8000de8 <GPIO_voidSetPortValue>

}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <seg_mins>:
void seg_mins (u8 mins){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]

	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_LOW);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2104      	movs	r1, #4
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 f95c 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_2,GPIO_HIGH);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2105      	movs	r1, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	f000 f957 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_3,GPIO_HIGH);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2106      	movs	r1, #6
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 f952 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_4,GPIO_HIGH);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2107      	movs	r1, #7
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 f94d 	bl	8000cb0 <GPIO_voidSetPinValue>
	Display(mins%10);
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <seg_mins+0x9c>)
 8000a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a1e:	08d9      	lsrs	r1, r3, #3
 8000a20:	460b      	mov	r3, r1
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	440b      	add	r3, r1
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffb8 	bl	80009a2 <Display>
	delay_ms(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fa12 	bl	8000e5c <delay_ms>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_HIGH);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 f937 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_LOW);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2104      	movs	r1, #4
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 f932 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_HIGH);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2104      	movs	r1, #4
 8000a50:	2001      	movs	r0, #1
 8000a52:	f000 f92d 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_HIGH);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2104      	movs	r1, #4
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 f928 	bl	8000cb0 <GPIO_voidSetPinValue>
	Display(mins/10);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <seg_mins+0x9c>)
 8000a64:	fba2 2303 	umull	r2, r3, r2, r3
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff98 	bl	80009a2 <Display>
	delay_ms(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 f9f2 	bl	8000e5c <delay_ms>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	cccccccd 	.word	0xcccccccd

08000a84 <seg_sec>:
void seg_sec (u8 sec){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]

	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_LOW);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2104      	movs	r1, #4
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 f90c 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_2,GPIO_HIGH);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f907 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_3,GPIO_HIGH);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2106      	movs	r1, #6
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 f902 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_4,GPIO_HIGH);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2107      	movs	r1, #7
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f000 f8fd 	bl	8000cb0 <GPIO_voidSetPinValue>
	Display(sec%10);
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <seg_sec+0x9c>)
 8000aba:	fba3 1302 	umull	r1, r3, r3, r2
 8000abe:	08d9      	lsrs	r1, r3, #3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff68 	bl	80009a2 <Display>
	delay_ms(1);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 f9c2 	bl	8000e5c <delay_ms>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_HIGH);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2104      	movs	r1, #4
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 f8e7 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_HIGH);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 f8e2 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_LOW);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2104      	movs	r1, #4
 8000af0:	2001      	movs	r0, #1
 8000af2:	f000 f8dd 	bl	8000cb0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(Seg_PORT,Seg_1,GPIO_LOW);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2104      	movs	r1, #4
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 f8d8 	bl	8000cb0 <GPIO_voidSetPinValue>
	Display(sec/10);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <seg_sec+0x9c>)
 8000b04:	fba2 2303 	umull	r2, r3, r2, r3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff48 	bl	80009a2 <Display>
	delay_ms(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 f9a2 	bl	8000e5c <delay_ms>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	cccccccd 	.word	0xcccccccd

08000b24 <GPIO_voidSetPinDirection>:

#include "GPIO_interface.h"
#include "GPIO_private.h"

void	GPIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	71bb      	strb	r3, [r7, #6]
 8000b32:	4613      	mov	r3, r2
 8000b34:	717b      	strb	r3, [r7, #5]
	if(pin<PIN8){
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d852      	bhi.n	8000be2 <GPIO_voidSetPinDirection+0xbe>
		switch(port){
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d037      	beq.n	8000bb2 <GPIO_voidSetPinDirection+0x8e>
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	f300 80a2 	bgt.w	8000c8c <GPIO_voidSetPinDirection+0x168>
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <GPIO_voidSetPinDirection+0x2e>
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d018      	beq.n	8000b82 <GPIO_voidSetPinDirection+0x5e>
			GPIOC_CRH&=~(0x0F<<((pin-8)*4));
			GPIOC_CRH|=(Direction<<(pin*4));
			break;
		}
	}
}
 8000b50:	e09c      	b.n	8000c8c <GPIO_voidSetPinDirection+0x168>
			GPIOA_CRL&=~(0x0F<<(pin*4));
 8000b52:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <GPIO_voidSetPinDirection+0x174>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	43d2      	mvns	r2, r2
 8000b62:	4611      	mov	r1, r2
 8000b64:	4a4c      	ldr	r2, [pc, #304]	; (8000c98 <GPIO_voidSetPinDirection+0x174>)
 8000b66:	400b      	ands	r3, r1
 8000b68:	6013      	str	r3, [r2, #0]
			GPIOA_CRL|=(Direction<<(pin*4));
 8000b6a:	4b4b      	ldr	r3, [pc, #300]	; (8000c98 <GPIO_voidSetPinDirection+0x174>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	7979      	ldrb	r1, [r7, #5]
 8000b70:	79ba      	ldrb	r2, [r7, #6]
 8000b72:	0092      	lsls	r2, r2, #2
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a47      	ldr	r2, [pc, #284]	; (8000c98 <GPIO_voidSetPinDirection+0x174>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
			break;
 8000b80:	e084      	b.n	8000c8c <GPIO_voidSetPinDirection+0x168>
			GPIOB_CRL&=~(0x0F<<(pin*4));
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <GPIO_voidSetPinDirection+0x178>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	79ba      	ldrb	r2, [r7, #6]
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b90:	43d2      	mvns	r2, r2
 8000b92:	4611      	mov	r1, r2
 8000b94:	4a41      	ldr	r2, [pc, #260]	; (8000c9c <GPIO_voidSetPinDirection+0x178>)
 8000b96:	400b      	ands	r3, r1
 8000b98:	6013      	str	r3, [r2, #0]
			GPIOB_CRL|=(Direction<<(pin*4));
 8000b9a:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <GPIO_voidSetPinDirection+0x178>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7979      	ldrb	r1, [r7, #5]
 8000ba0:	79ba      	ldrb	r2, [r7, #6]
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4a3c      	ldr	r2, [pc, #240]	; (8000c9c <GPIO_voidSetPinDirection+0x178>)
 8000bac:	430b      	orrs	r3, r1
 8000bae:	6013      	str	r3, [r2, #0]
			break;
 8000bb0:	e06c      	b.n	8000c8c <GPIO_voidSetPinDirection+0x168>
			GPIOC_CRL&=~(0x0F<<(pin*4));
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <GPIO_voidSetPinDirection+0x17c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	210f      	movs	r1, #15
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <GPIO_voidSetPinDirection+0x17c>)
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	6013      	str	r3, [r2, #0]
			GPIOC_CRL|=(Direction<<(pin*4));
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <GPIO_voidSetPinDirection+0x17c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	7979      	ldrb	r1, [r7, #5]
 8000bd0:	79ba      	ldrb	r2, [r7, #6]
 8000bd2:	0092      	lsls	r2, r2, #2
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4a31      	ldr	r2, [pc, #196]	; (8000ca0 <GPIO_voidSetPinDirection+0x17c>)
 8000bdc:	430b      	orrs	r3, r1
 8000bde:	6013      	str	r3, [r2, #0]
			break;
 8000be0:	e054      	b.n	8000c8c <GPIO_voidSetPinDirection+0x168>
		switch(port){
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d038      	beq.n	8000c5a <GPIO_voidSetPinDirection+0x136>
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	dc4f      	bgt.n	8000c8c <GPIO_voidSetPinDirection+0x168>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <GPIO_voidSetPinDirection+0xd2>
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d019      	beq.n	8000c28 <GPIO_voidSetPinDirection+0x104>
}
 8000bf4:	e04a      	b.n	8000c8c <GPIO_voidSetPinDirection+0x168>
			GPIOA_CRH&=~(0x0F<<((pin-8)*4));
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <GPIO_voidSetPinDirection+0x180>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	79ba      	ldrb	r2, [r7, #6]
 8000bfc:	3a08      	subs	r2, #8
 8000bfe:	0092      	lsls	r2, r2, #2
 8000c00:	210f      	movs	r1, #15
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	43d2      	mvns	r2, r2
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4a26      	ldr	r2, [pc, #152]	; (8000ca4 <GPIO_voidSetPinDirection+0x180>)
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	6013      	str	r3, [r2, #0]
			GPIOA_CRH|=(Direction<<(pin*4));
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <GPIO_voidSetPinDirection+0x180>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	7979      	ldrb	r1, [r7, #5]
 8000c16:	79ba      	ldrb	r2, [r7, #6]
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <GPIO_voidSetPinDirection+0x180>)
 8000c22:	430b      	orrs	r3, r1
 8000c24:	6013      	str	r3, [r2, #0]
			break;
 8000c26:	e031      	b.n	8000c8c <GPIO_voidSetPinDirection+0x168>
			GPIOB_CRH&=~(0x0F<<((pin-8)*4));
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <GPIO_voidSetPinDirection+0x184>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	79ba      	ldrb	r2, [r7, #6]
 8000c2e:	3a08      	subs	r2, #8
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	210f      	movs	r1, #15
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <GPIO_voidSetPinDirection+0x184>)
 8000c3e:	400b      	ands	r3, r1
 8000c40:	6013      	str	r3, [r2, #0]
			GPIOB_CRH|=(Direction<<(pin*4));
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <GPIO_voidSetPinDirection+0x184>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	7979      	ldrb	r1, [r7, #5]
 8000c48:	79ba      	ldrb	r2, [r7, #6]
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	4611      	mov	r1, r2
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <GPIO_voidSetPinDirection+0x184>)
 8000c54:	430b      	orrs	r3, r1
 8000c56:	6013      	str	r3, [r2, #0]
			break;
 8000c58:	e018      	b.n	8000c8c <GPIO_voidSetPinDirection+0x168>
			GPIOC_CRH&=~(0x0F<<((pin-8)*4));
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <GPIO_voidSetPinDirection+0x188>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	79ba      	ldrb	r2, [r7, #6]
 8000c60:	3a08      	subs	r2, #8
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	210f      	movs	r1, #15
 8000c66:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6a:	43d2      	mvns	r2, r2
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <GPIO_voidSetPinDirection+0x188>)
 8000c70:	400b      	ands	r3, r1
 8000c72:	6013      	str	r3, [r2, #0]
			GPIOC_CRH|=(Direction<<(pin*4));
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <GPIO_voidSetPinDirection+0x188>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	7979      	ldrb	r1, [r7, #5]
 8000c7a:	79ba      	ldrb	r2, [r7, #6]
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <GPIO_voidSetPinDirection+0x188>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6013      	str	r3, [r2, #0]
			break;
 8000c8a:	bf00      	nop
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40010804 	.word	0x40010804
 8000ca8:	40010c04 	.word	0x40010c04
 8000cac:	40011004 	.word	0x40011004

08000cb0 <GPIO_voidSetPinValue>:

void	GPIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	717b      	strb	r3, [r7, #5]
	if(Value==GPIO_HIGH){
 8000cc2:	797b      	ldrb	r3, [r7, #5]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d11e      	bne.n	8000d06 <GPIO_voidSetPinValue+0x56>
			switch(port){
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d012      	beq.n	8000cf4 <GPIO_voidSetPinValue+0x44>
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	dc41      	bgt.n	8000d56 <GPIO_voidSetPinValue+0xa6>
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <GPIO_voidSetPinValue+0x2c>
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d006      	beq.n	8000ce8 <GPIO_voidSetPinValue+0x38>
			BITBAND_PERIPH(GPIOB_BSRR,(pin+16))=1;
			//SETBIT(GPIOA_BSRR,pin);

		}
	}*/
}
 8000cda:	e03c      	b.n	8000d56 <GPIO_voidSetPinValue+0xa6>
				 GPIOA_BSRR= 1<<pin;
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	409a      	lsls	r2, r3
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <GPIO_voidSetPinValue+0xb0>)
 8000ce4:	601a      	str	r2, [r3, #0]
				break;
 8000ce6:	e036      	b.n	8000d56 <GPIO_voidSetPinValue+0xa6>
				 GPIOB_BSRR= 1<<pin;
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2201      	movs	r2, #1
 8000cec:	409a      	lsls	r2, r3
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <GPIO_voidSetPinValue+0xb4>)
 8000cf0:	601a      	str	r2, [r3, #0]
				break;
 8000cf2:	e030      	b.n	8000d56 <GPIO_voidSetPinValue+0xa6>
				if(pin<PIN3){
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d82a      	bhi.n	8000d50 <GPIO_voidSetPinValue+0xa0>
					 GPIOC_BSRR= 1<<pin;
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	409a      	lsls	r2, r3
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <GPIO_voidSetPinValue+0xb8>)
 8000d02:	601a      	str	r2, [r3, #0]
				break;
 8000d04:	e024      	b.n	8000d50 <GPIO_voidSetPinValue+0xa0>
		else if(Value==GPIO_LOW){
 8000d06:	797b      	ldrb	r3, [r7, #5]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d124      	bne.n	8000d56 <GPIO_voidSetPinValue+0xa6>
			switch(port){
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d014      	beq.n	8000d3c <GPIO_voidSetPinValue+0x8c>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dc1f      	bgt.n	8000d56 <GPIO_voidSetPinValue+0xa6>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <GPIO_voidSetPinValue+0x70>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d007      	beq.n	8000d2e <GPIO_voidSetPinValue+0x7e>
}
 8000d1e:	e01a      	b.n	8000d56 <GPIO_voidSetPinValue+0xa6>
				GPIOA_BSRR= 1<<(pin+16);
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	3310      	adds	r3, #16
 8000d24:	2201      	movs	r2, #1
 8000d26:	409a      	lsls	r2, r3
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <GPIO_voidSetPinValue+0xb0>)
 8000d2a:	601a      	str	r2, [r3, #0]
				break;
 8000d2c:	e013      	b.n	8000d56 <GPIO_voidSetPinValue+0xa6>
				GPIOB_BSRR= 1<<(pin+16);
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	3310      	adds	r3, #16
 8000d32:	2201      	movs	r2, #1
 8000d34:	409a      	lsls	r2, r3
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <GPIO_voidSetPinValue+0xb4>)
 8000d38:	601a      	str	r2, [r3, #0]
				break;
 8000d3a:	e00c      	b.n	8000d56 <GPIO_voidSetPinValue+0xa6>
				if(pin<PIN3){
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d808      	bhi.n	8000d54 <GPIO_voidSetPinValue+0xa4>
					GPIOC_BSRR= 1<<(pin+16);
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	3310      	adds	r3, #16
 8000d46:	2201      	movs	r2, #1
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <GPIO_voidSetPinValue+0xb8>)
 8000d4c:	601a      	str	r2, [r3, #0]
				break;
 8000d4e:	e001      	b.n	8000d54 <GPIO_voidSetPinValue+0xa4>
				break;
 8000d50:	bf00      	nop
 8000d52:	e000      	b.n	8000d56 <GPIO_voidSetPinValue+0xa6>
				break;
 8000d54:	bf00      	nop
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40010810 	.word	0x40010810
 8000d64:	40010c10 	.word	0x40010c10
 8000d68:	40011010 	.word	0x40011010

08000d6c <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue(u8 port, u8 pin)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
	u8 READ = GPIO_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
	switch(port){
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d01a      	beq.n	8000dbc <GPIO_u8GetPinValue+0x50>
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	dc22      	bgt.n	8000dd0 <GPIO_u8GetPinValue+0x64>
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <GPIO_u8GetPinValue+0x28>
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00a      	beq.n	8000da8 <GPIO_u8GetPinValue+0x3c>
 8000d92:	e01d      	b.n	8000dd0 <GPIO_u8GetPinValue+0x64>
	case PORTA:
		READ=READBIT(GPIOA_IDR,pin);
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <GPIO_u8GetPinValue+0x70>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
		break;
 8000da6:	e013      	b.n	8000dd0 <GPIO_u8GetPinValue+0x64>
	case PORTB:
		READ=READBIT(GPIOB_IDR,pin);
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <GPIO_u8GetPinValue+0x74>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	fa22 f303 	lsr.w	r3, r2, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
		break;
 8000dba:	e009      	b.n	8000dd0 <GPIO_u8GetPinValue+0x64>
	case PORTC:

			READ=READBIT(GPIOC_IDR,pin);
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <GPIO_u8GetPinValue+0x78>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]

		break;
 8000dce:	bf00      	nop
	}
	return READ;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40010808 	.word	0x40010808
 8000de0:	40010c08 	.word	0x40010c08
 8000de4:	40011008 	.word	0x40011008

08000de8 <GPIO_voidSetPortValue>:
				    	GPIOC_CRH|=(Direction<<(i*4));
					}
				break;
			}
}
void	GPIO_voidSetPortValue(u8 port, u16 Value){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	80bb      	strh	r3, [r7, #4]

	switch(port){
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d00e      	beq.n	8000e1c <GPIO_voidSetPortValue+0x34>
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	dc10      	bgt.n	8000e24 <GPIO_voidSetPortValue+0x3c>
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d002      	beq.n	8000e0c <GPIO_voidSetPortValue+0x24>
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d004      	beq.n	8000e14 <GPIO_voidSetPortValue+0x2c>
				GPIOC_BSRR=Value;

				break;
			}

}
 8000e0a:	e00b      	b.n	8000e24 <GPIO_voidSetPortValue+0x3c>
				GPIOA_BSRR=Value;
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <GPIO_voidSetPortValue+0x48>)
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
				break;
 8000e12:	e007      	b.n	8000e24 <GPIO_voidSetPortValue+0x3c>
				GPIOB_BSRR=Value;
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <GPIO_voidSetPortValue+0x4c>)
 8000e16:	88bb      	ldrh	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
				break;
 8000e1a:	e003      	b.n	8000e24 <GPIO_voidSetPortValue+0x3c>
				GPIOC_BSRR=Value;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <GPIO_voidSetPortValue+0x50>)
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
				break;
 8000e22:	bf00      	nop
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40010810 	.word	0x40010810
 8000e34:	40010c10 	.word	0x40010c10
 8000e38:	40011010 	.word	0x40011010

08000e3c <GPIO_u16GetPortValue>:
			GPIO_voidSetPinValue(port, pin, GPIO_LOW);
			break;
	}

}
u16 GPIO_u16GetPortValue(u8 port){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	return GPIOC_IDR;
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <GPIO_u16GetPortValue+0x1c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b29b      	uxth	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40011008 	.word	0x40011008

08000e5c <delay_ms>:
void delay_ms (u32 d)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	volatile u32 i=0,c=(d*350);
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	60bb      	str	r3, [r7, #8]
	for(i=0 ;i<c ;i++);
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e002      	b.n	8000e80 <delay_ms+0x24>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3f8      	bcc.n	8000e7a <delay_ms+0x1e>
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <MRCC_voidInit>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void MRCC_voidInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0


		#if 	CLOCK_TYPE == HSI
		/* internal 8 MHZ RC oscillator 			*/
		/*	HSI clock enable						*/
	          SETBIT(MRCC->CR,0);
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]
	          /*	HSI Ready Flag					*/
	          while(!READBIT(MRCC->CR,1)){}
 8000ea4:	bf00      	nop
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f9      	beq.n	8000ea6 <MRCC_voidInit+0x12>

				/*HSI selected as system clock		*/
				CLRBIT(MRCC->CFGR,0);
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
				CLRBIT(MRCC->CFGR,1);
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	6053      	str	r3, [r2, #4]
				/*	HSI Ready Flag		SWS			*/
				if((!READBIT(MRCC->CR,2))&&(!READBIT(MRCC->CR,3)))
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <MRCC_voidInit+0x46>
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
			#error		"Wrong Clock System type congiguration!"

		#endif
		/*FOR Clock Security System				*/
		#if		CLOCK_SECURITY_SYSTEM	==	OFF
			    CLRBIT(MRCC->CR,19);
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <MRCC_voidInit+0x5c>)
 8000ee0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000ee4:	6013      	str	r3, [r2, #0]
			    SETBIT(MRCC->CR,19);
		#else
				#warning	"Wrong clock security system configuration choice!"
		#endif

}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <MRCC_enumSetPeripheralClock>:

ERROR_status MRCC_enumSetPeripheralClock(u8 Copy_u8PeripheralBus , u8 Copy_u8PeripheralName , u8 Copy_u8PeripheralState )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	460b      	mov	r3, r1
 8000f00:	71bb      	strb	r3, [r7, #6]
 8000f02:	4613      	mov	r3, r2
 8000f04:	717b      	strb	r3, [r7, #5]
	ERROR_status LOC_enumstate = E_NOK ;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
	switch( Copy_u8PeripheralState )
 8000f0a:	797b      	ldrb	r3, [r7, #5]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d063      	beq.n	8000fd8 <MRCC_enumSetPeripheralClock+0xe4>
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	dc7e      	bgt.n	8001012 <MRCC_enumSetPeripheralClock+0x11e>
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d002      	beq.n	8000f1e <MRCC_enumSetPeripheralClock+0x2a>
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d02d      	beq.n	8000f78 <MRCC_enumSetPeripheralClock+0x84>
 8000f1c:	e079      	b.n	8001012 <MRCC_enumSetPeripheralClock+0x11e>
	{
		case	RCC_ENABLE 	:
							switch( Copy_u8PeripheralBus )
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d01c      	beq.n	8000f5e <MRCC_enumSetPeripheralClock+0x6a>
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	dc25      	bgt.n	8000f74 <MRCC_enumSetPeripheralClock+0x80>
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d002      	beq.n	8000f32 <MRCC_enumSetPeripheralClock+0x3e>
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d00b      	beq.n	8000f48 <MRCC_enumSetPeripheralClock+0x54>
							{
								case AHB  :	SETBIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
								case APB1 :	SETBIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
								case APB2 : SETBIT( MRCC->APB2ENR , Copy_u8PeripheralName  );break;
								default	  :	break;
 8000f30:	e020      	b.n	8000f74 <MRCC_enumSetPeripheralClock+0x80>
								case AHB  :	SETBIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
 8000f32:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	79ba      	ldrb	r2, [r7, #6]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a37      	ldr	r2, [pc, #220]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	e016      	b.n	8000f76 <MRCC_enumSetPeripheralClock+0x82>
								case APB1 :	SETBIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
 8000f48:	4b35      	ldr	r3, [pc, #212]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a32      	ldr	r2, [pc, #200]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	61d3      	str	r3, [r2, #28]
 8000f5c:	e00b      	b.n	8000f76 <MRCC_enumSetPeripheralClock+0x82>
								case APB2 : SETBIT( MRCC->APB2ENR , Copy_u8PeripheralName  );break;
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	79ba      	ldrb	r2, [r7, #6]
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f6e:	430b      	orrs	r3, r1
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	e000      	b.n	8000f76 <MRCC_enumSetPeripheralClock+0x82>
								default	  :	break;
 8000f74:	bf00      	nop
							}
							break;
 8000f76:	e04c      	b.n	8001012 <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_DISABLE :
							switch( Copy_u8PeripheralBus )
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d01e      	beq.n	8000fbc <MRCC_enumSetPeripheralClock+0xc8>
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	dc28      	bgt.n	8000fd4 <MRCC_enumSetPeripheralClock+0xe0>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d002      	beq.n	8000f8c <MRCC_enumSetPeripheralClock+0x98>
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d00c      	beq.n	8000fa4 <MRCC_enumSetPeripheralClock+0xb0>
								case APB1 :	CLRBIT( MRCC->APB1ENR  , Copy_u8PeripheralName  );
								break;
								case APB2 : CLRBIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
								break;
								default	  :
								break;
 8000f8a:	e023      	b.n	8000fd4 <MRCC_enumSetPeripheralClock+0xe0>
								case AHB  :	CLRBIT( MRCC->AHBENR  , Copy_u8PeripheralName  );
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	79ba      	ldrb	r2, [r7, #6]
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4a20      	ldr	r2, [pc, #128]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	6153      	str	r3, [r2, #20]
								break;
 8000fa2:	e018      	b.n	8000fd6 <MRCC_enumSetPeripheralClock+0xe2>
								case APB1 :	CLRBIT( MRCC->APB1ENR  , Copy_u8PeripheralName  );
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	79ba      	ldrb	r2, [r7, #6]
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	61d3      	str	r3, [r2, #28]
								break;
 8000fba:	e00c      	b.n	8000fd6 <MRCC_enumSetPeripheralClock+0xe2>
								case APB2 : CLRBIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	79ba      	ldrb	r2, [r7, #6]
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	43d2      	mvns	r2, r2
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000fce:	400b      	ands	r3, r1
 8000fd0:	6193      	str	r3, [r2, #24]
								break;
 8000fd2:	e000      	b.n	8000fd6 <MRCC_enumSetPeripheralClock+0xe2>
								break;
 8000fd4:	bf00      	nop
							}
							break;
 8000fd6:	e01c      	b.n	8001012 <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_RESET	:
							switch( Copy_u8PeripheralBus )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d002      	beq.n	8000fe4 <MRCC_enumSetPeripheralClock+0xf0>
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d00b      	beq.n	8000ffa <MRCC_enumSetPeripheralClock+0x106>
							{
								case APB1 :	SETBIT( MRCC->APB1RSTR , Copy_u8PeripheralName  );break;
								case APB2 : SETBIT( MRCC->APB2RSTR , Copy_u8PeripheralName  );break;
								default	  :	break;
 8000fe2:	e015      	b.n	8001010 <MRCC_enumSetPeripheralClock+0x11c>
								case APB1 :	SETBIT( MRCC->APB1RSTR , Copy_u8PeripheralName  );break;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	79ba      	ldrb	r2, [r7, #6]
 8000fea:	2101      	movs	r1, #1
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000ff4:	430b      	orrs	r3, r1
 8000ff6:	6113      	str	r3, [r2, #16]
 8000ff8:	e00a      	b.n	8001010 <MRCC_enumSetPeripheralClock+0x11c>
								case APB2 : SETBIT( MRCC->APB2RSTR , Copy_u8PeripheralName  );break;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	79ba      	ldrb	r2, [r7, #6]
 8001000:	2101      	movs	r1, #1
 8001002:	fa01 f202 	lsl.w	r2, r1, r2
 8001006:	4611      	mov	r1, r2
 8001008:	4a05      	ldr	r2, [pc, #20]	; (8001020 <MRCC_enumSetPeripheralClock+0x12c>)
 800100a:	430b      	orrs	r3, r1
 800100c:	60d3      	str	r3, [r2, #12]
 800100e:	bf00      	nop
							}
							break;
 8001010:	bf00      	nop
	}
	return LOC_enumstate;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <SYSTICK_Start>:
	/* CLK source and interrupt enable */
	STK_CTRL|=SYSTICK_CLK_AHB|SYSTICK_TICK_INT_ENABLE;
	return OK;
}
u8 SYSTICK_Start (void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
	/* enable counter */
	STK_CTRL|= SYSTICK_ENABLE;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <SYSTICK_Start+0x1c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <SYSTICK_Start+0x1c>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]
	return OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e010 	.word	0xe000e010

08001044 <SYSTICK_Stop>:
u8 SYSTICK_Stop (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	/* disable counter */
	STK_CTRL&= SYSTICK_DISABLE;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SYSTICK_Stop+0x1c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <SYSTICK_Stop+0x1c>)
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	6013      	str	r3, [r2, #0]
	return OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <SysTick_Handler>:
		}
		return OK;

}
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	if(APPcbf!=NULL_PTR){
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Handler+0x18>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <SysTick_Handler+0x12>
		APPcbf();
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <SysTick_Handler+0x18>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4798      	blx	r3
		}
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000034 	.word	0x20000034

08001080 <main>:
	for(i=0 ;i<c ;i++);
}

*/
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	MRCC_voidInit();
 8001086:	f7ff ff05 	bl	8000e94 <MRCC_voidInit>
		MRCC_enumSetPeripheralClock(APB2, GPIOA, RCC_ENABLE);
 800108a:	2201      	movs	r2, #1
 800108c:	2102      	movs	r1, #2
 800108e:	2003      	movs	r0, #3
 8001090:	f7ff ff30 	bl	8000ef4 <MRCC_enumSetPeripheralClock>
		MRCC_enumSetPeripheralClock(APB2, GPIOB, RCC_ENABLE);
 8001094:	2201      	movs	r2, #1
 8001096:	2103      	movs	r1, #3
 8001098:	2003      	movs	r0, #3
 800109a:	f7ff ff2b 	bl	8000ef4 <MRCC_enumSetPeripheralClock>
		GPIO_voidSetPinDirection(PORTA, PIN7, GPIO_OUTPUT_10MHZ_PP);
 800109e:	2201      	movs	r2, #1
 80010a0:	2107      	movs	r1, #7
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fd3e 	bl	8000b24 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(PORTA, PIN7, GPIO_HIGH);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2107      	movs	r1, #7
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fdff 	bl	8000cb0 <GPIO_voidSetPinValue>
		LCD_Init();
 80010b2:	f7ff fa7d 	bl	80005b0 <LCD_Init>
		KeyPad_Init();
 80010b6:	f7ff f9fd 	bl	80004b4 <KeyPad_Init>
		LCD_GoTo(0,0);
 80010ba:	2100      	movs	r1, #0
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fbc9 	bl	8000854 <LCD_GoTo>
		LCD_SendChar('A');
 80010c2:	2041      	movs	r0, #65	; 0x41
 80010c4:	f7ff fab3 	bl	800062e <LCD_SendChar>
		Stop_Watch_Init();
 80010c8:	f7ff f852 	bl	8000170 <Stop_Watch_Init>
	    /* Loop forever */
		for(;;){
			//delay_ms(500);

			LCD_GoTo(1, 0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2001      	movs	r0, #1
 80010d0:	f7ff fbc0 	bl	8000854 <LCD_GoTo>
			u8 c = KeyPad_GetKey();
 80010d4:	f7ff fa1c 	bl	8000510 <KeyPad_GetKey>
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
			if(c!='N'){
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b4e      	cmp	r3, #78	; 0x4e
 80010e0:	d0f4      	beq.n	80010cc <main+0x4c>

			LCD_writeNumber(c);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fbef 	bl	80008c8 <LCD_writeNumber>
			Stop_Watch();
 80010ea:	f7ff f977 	bl	80003dc <Stop_Watch>
		for(;;){
 80010ee:	e7ed      	b.n	80010cc <main+0x4c>

080010f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111e:	f000 f811 	bl	8001144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001122:	f7ff ffad 	bl	8001080 <main>

08001126 <LoopForever>:

LoopForever:
  b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   r0, =_estack
 8001128:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001134:	080011f4 	.word	0x080011f4
  ldr r2, =_sbss
 8001138:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800113c:	20000038 	.word	0x20000038

08001140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <__libc_init_array>:
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	2600      	movs	r6, #0
 8001148:	4d0c      	ldr	r5, [pc, #48]	; (800117c <__libc_init_array+0x38>)
 800114a:	4c0d      	ldr	r4, [pc, #52]	; (8001180 <__libc_init_array+0x3c>)
 800114c:	1b64      	subs	r4, r4, r5
 800114e:	10a4      	asrs	r4, r4, #2
 8001150:	42a6      	cmp	r6, r4
 8001152:	d109      	bne.n	8001168 <__libc_init_array+0x24>
 8001154:	f000 f81a 	bl	800118c <_init>
 8001158:	2600      	movs	r6, #0
 800115a:	4d0a      	ldr	r5, [pc, #40]	; (8001184 <__libc_init_array+0x40>)
 800115c:	4c0a      	ldr	r4, [pc, #40]	; (8001188 <__libc_init_array+0x44>)
 800115e:	1b64      	subs	r4, r4, r5
 8001160:	10a4      	asrs	r4, r4, #2
 8001162:	42a6      	cmp	r6, r4
 8001164:	d105      	bne.n	8001172 <__libc_init_array+0x2e>
 8001166:	bd70      	pop	{r4, r5, r6, pc}
 8001168:	f855 3b04 	ldr.w	r3, [r5], #4
 800116c:	4798      	blx	r3
 800116e:	3601      	adds	r6, #1
 8001170:	e7ee      	b.n	8001150 <__libc_init_array+0xc>
 8001172:	f855 3b04 	ldr.w	r3, [r5], #4
 8001176:	4798      	blx	r3
 8001178:	3601      	adds	r6, #1
 800117a:	e7f2      	b.n	8001162 <__libc_init_array+0x1e>
 800117c:	080011ec 	.word	0x080011ec
 8001180:	080011ec 	.word	0x080011ec
 8001184:	080011ec 	.word	0x080011ec
 8001188:	080011f0 	.word	0x080011f0

0800118c <_init>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	bf00      	nop
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr

08001198 <_fini>:
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800119a:	bf00      	nop
 800119c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119e:	bc08      	pop	{r3}
 80011a0:	469e      	mov	lr, r3
 80011a2:	4770      	bx	lr
