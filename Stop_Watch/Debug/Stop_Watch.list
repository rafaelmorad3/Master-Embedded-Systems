
Stop_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a7c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000bac  08000bac  00010bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bbc  08000bbc  00010bc4  2**0
                  CONTENTS
  4 .ARM          00000000  08000bbc  08000bbc  00010bc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bbc  08000bc4  00010bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bbc  08000bbc  00010bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000bc4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000bc4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010bc4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010bed  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bc2  00000000  00000000  00010c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000628  00000000  00000000  000117f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00011e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000118  00000000  00000000  00011fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000c3c  00000000  00000000  000120d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000010c6  00000000  00000000  00012d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000053ee  00000000  00000000  00013dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000480  00000000  00000000  000191c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003b  00000000  00000000  00019640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b94 	.word	0x08000b94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b94 	.word	0x08000b94

08000170 <KeyPad_Init>:
const  u8 KeysARR[ROWS][COLS]={{'7','8','9','/'},
                        {'4','5','6','*'},
                        {'1','2','3','-'},
                        {'c','0','=','+'}};
void KeyPad_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	u8 r;
	for (r=0;r<ROWS;r++)
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	e00e      	b.n	800019a <KeyPad_Init+0x2a>
	{
		GPIO_voidSetPinDirection(KeyPad_Port, r, GPIO_OUTPUT_10MHZ_PP);
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2201      	movs	r2, #1
 8000180:	4619      	mov	r1, r3
 8000182:	2001      	movs	r0, #1
 8000184:	f000 fa30 	bl	80005e8 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(KeyPad_Port,r,GPIO_HIGH);
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	2201      	movs	r2, #1
 800018c:	4619      	mov	r1, r3
 800018e:	2001      	movs	r0, #1
 8000190:	f000 faf0 	bl	8000774 <GPIO_voidSetPinValue>
	for (r=0;r<ROWS;r++)
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	3301      	adds	r3, #1
 8000198:	71fb      	strb	r3, [r7, #7]
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	2b03      	cmp	r3, #3
 800019e:	d9ed      	bls.n	800017c <KeyPad_Init+0xc>
	}
	for (r=0;r<COLS;r++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	71fb      	strb	r3, [r7, #7]
 80001a4:	e00a      	b.n	80001bc <KeyPad_Init+0x4c>
		{
			GPIO_voidSetPinDirection(KeyPad_Port, r+4, GPIO_INPUT_PULL_UP_DOWN);
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	3304      	adds	r3, #4
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	2208      	movs	r2, #8
 80001ae:	4619      	mov	r1, r3
 80001b0:	2001      	movs	r0, #1
 80001b2:	f000 fa19 	bl	80005e8 <GPIO_voidSetPinDirection>
	for (r=0;r<COLS;r++)
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	3301      	adds	r3, #1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b03      	cmp	r3, #3
 80001c0:	d9f1      	bls.n	80001a6 <KeyPad_Init+0x36>

		}
}
 80001c2:	bf00      	nop
 80001c4:	bf00      	nop
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}

080001cc <KeyPad_GetKey>:

u8 KeyPad_GetKey(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
	u8 r,c,key=NO_KEY,NUM=NO_KEY;
 80001d2:	234e      	movs	r3, #78	; 0x4e
 80001d4:	717b      	strb	r3, [r7, #5]
 80001d6:	234e      	movs	r3, #78	; 0x4e
 80001d8:	713b      	strb	r3, [r7, #4]
	for (r=0;r<ROWS;r++)
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	e03b      	b.n	8000258 <KeyPad_GetKey+0x8c>
	{
		GPIO_voidSetPinValue(KeyPad_Port,r,GPIO_HIGH);
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2201      	movs	r2, #1
 80001e4:	4619      	mov	r1, r3
 80001e6:	2001      	movs	r0, #1
 80001e8:	f000 fac4 	bl	8000774 <GPIO_voidSetPinValue>
		for (c=0;c<COLS;c++)
 80001ec:	2300      	movs	r3, #0
 80001ee:	71bb      	strb	r3, [r7, #6]
 80001f0:	e026      	b.n	8000240 <KeyPad_GetKey+0x74>
		{
			NUM=GPIO_u8GetPinValue(KeyPad_Port,c+4);
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	3304      	adds	r3, #4
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	4619      	mov	r1, r3
 80001fa:	2001      	movs	r0, #1
 80001fc:	f000 fb18 	bl	8000830 <GPIO_u8GetPinValue>
 8000200:	4603      	mov	r3, r0
 8000202:	713b      	strb	r3, [r7, #4]
			if (NUM==GPIO_HIGH)
 8000204:	793b      	ldrb	r3, [r7, #4]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d117      	bne.n	800023a <KeyPad_GetKey+0x6e>
			{
				key=KeysARR[r][c];
 800020a:	79fa      	ldrb	r2, [r7, #7]
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	4916      	ldr	r1, [pc, #88]	; (8000268 <KeyPad_GetKey+0x9c>)
 8000210:	0092      	lsls	r2, r2, #2
 8000212:	440a      	add	r2, r1
 8000214:	4413      	add	r3, r2
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	717b      	strb	r3, [r7, #5]
				delay_ms(10);
 800021a:	200a      	movs	r0, #10
 800021c:	f000 fb46 	bl	80008ac <delay_ms>
				while(NUM==GPIO_HIGH){
 8000220:	e008      	b.n	8000234 <KeyPad_GetKey+0x68>
					NUM=GPIO_u8GetPinValue(KeyPad_Port,c+4);
 8000222:	79bb      	ldrb	r3, [r7, #6]
 8000224:	3304      	adds	r3, #4
 8000226:	b2db      	uxtb	r3, r3
 8000228:	4619      	mov	r1, r3
 800022a:	2001      	movs	r0, #1
 800022c:	f000 fb00 	bl	8000830 <GPIO_u8GetPinValue>
 8000230:	4603      	mov	r3, r0
 8000232:	713b      	strb	r3, [r7, #4]
				while(NUM==GPIO_HIGH){
 8000234:	793b      	ldrb	r3, [r7, #4]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d0f3      	beq.n	8000222 <KeyPad_GetKey+0x56>
		for (c=0;c<COLS;c++)
 800023a:	79bb      	ldrb	r3, [r7, #6]
 800023c:	3301      	adds	r3, #1
 800023e:	71bb      	strb	r3, [r7, #6]
 8000240:	79bb      	ldrb	r3, [r7, #6]
 8000242:	2b03      	cmp	r3, #3
 8000244:	d9d5      	bls.n	80001f2 <KeyPad_GetKey+0x26>
				}
			}
		}
		GPIO_voidSetPinValue(KeyPad_Port,r,GPIO_LOW);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2200      	movs	r2, #0
 800024a:	4619      	mov	r1, r3
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fa91 	bl	8000774 <GPIO_voidSetPinValue>
	for (r=0;r<ROWS;r++)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	3301      	adds	r3, #1
 8000256:	71fb      	strb	r3, [r7, #7]
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	2b03      	cmp	r3, #3
 800025c:	d9c0      	bls.n	80001e0 <KeyPad_GetKey+0x14>
	}
	return key;
 800025e:	797b      	ldrb	r3, [r7, #5]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	08000bac 	.word	0x08000bac

0800026c <LCD_Init>:
static void LCD_SendData(u8 character);



void LCD_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
	/* Add your code here */
	/* Initialize Pins */


	for(volatile u8 i = 1 ;i <7 ; i++){
 8000272:	2301      	movs	r3, #1
 8000274:	71fb      	strb	r3, [r7, #7]
 8000276:	e015      	b.n	80002a4 <LCD_Init+0x38>
		GPIO_voidSetPinDirection(PORTA, i, GPIO_OUTPUT_10MHZ_PP	);
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	2201      	movs	r2, #1
 800027e:	4619      	mov	r1, r3
 8000280:	2000      	movs	r0, #0
 8000282:	f000 f9b1 	bl	80005e8 <GPIO_voidSetPinDirection>
		delay_ms(5);
 8000286:	2005      	movs	r0, #5
 8000288:	f000 fb10 	bl	80008ac <delay_ms>
        GPIO_voidSetPinValue(PORTA, i, GPIO_HIGH);
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2201      	movs	r2, #1
 8000292:	4619      	mov	r1, r3
 8000294:	2000      	movs	r0, #0
 8000296:	f000 fa6d 	bl	8000774 <GPIO_voidSetPinValue>
	for(volatile u8 i = 1 ;i <7 ; i++){
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	b2db      	uxtb	r3, r3
 800029e:	3301      	adds	r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	2b06      	cmp	r3, #6
 80002aa:	d9e5      	bls.n	8000278 <LCD_Init+0xc>
	/* Clear LCD */

	/* Increment cursor and turn off display shift */

	/* Turn display ON */
	   delay_ms(15);
 80002ac:	200f      	movs	r0, #15
 80002ae:	f000 fafd 	bl	80008ac <delay_ms>
		LCD_SendCommand(0x02);
 80002b2:	2002      	movs	r0, #2
 80002b4:	f000 f826 	bl	8000304 <LCD_SendCommand>
		delay_ms(2);
 80002b8:	2002      	movs	r0, #2
 80002ba:	f000 faf7 	bl	80008ac <delay_ms>
		LCD_SendCommand(0x28);
 80002be:	2028      	movs	r0, #40	; 0x28
 80002c0:	f000 f820 	bl	8000304 <LCD_SendCommand>
		delay_ms(2);
 80002c4:	2002      	movs	r0, #2
 80002c6:	f000 faf1 	bl	80008ac <delay_ms>
		LCD_SendCommand(0x0c);
 80002ca:	200c      	movs	r0, #12
 80002cc:	f000 f81a 	bl	8000304 <LCD_SendCommand>
		LCD_SendCommand(0x06);
 80002d0:	2006      	movs	r0, #6
 80002d2:	f000 f817 	bl	8000304 <LCD_SendCommand>
		LCD_SendCommand(0x01);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 f814 	bl	8000304 <LCD_SendCommand>
		delay_ms(2);
 80002dc:	2002      	movs	r0, #2
 80002de:	f000 fae5 	bl	80008ac <delay_ms>

	/* End of your code !*/
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <LCD_SendChar>:
void LCD_SendChar(u8 ch)
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b082      	sub	sp, #8
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	4603      	mov	r3, r0
 80002f2:	71fb      	strb	r3, [r7, #7]
	/* Add your code here */
	/* Change position and send character */
	LCD_SendData(ch);
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f879 	bl	80003ee <LCD_SendData>
	/* End of your code !*/

}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <LCD_SendCommand>:

	/* End of your code !*/
}

static void LCD_SendCommand(u8 command)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	u8		GPIO_u8GetPinValue(u8 port, u8 pin);
	void    GPIO_voidSetPortDirection(u8 port, u8 Direction);
//	GPIO_voidSetPortValue(PORTA, (command>>4)&0x000f);
//	GPIO_voidSetPortValue(PORTA, (command)&0x000f);
	/* Add your code here */
	GPIO_voidSetPinValue(RS, GPIO_LOW);
 800030e:	2200      	movs	r2, #0
 8000310:	2105      	movs	r1, #5
 8000312:	2000      	movs	r0, #0
 8000314:	f000 fa2e 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(command,4));
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	091b      	lsrs	r3, r3, #4
 800031c:	b2db      	uxtb	r3, r3
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	b2db      	uxtb	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	2101      	movs	r1, #1
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fa23 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(command,5));
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	095b      	lsrs	r3, r3, #5
 8000332:	b2db      	uxtb	r3, r3
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	2102      	movs	r1, #2
 800033e:	2000      	movs	r0, #0
 8000340:	f000 fa18 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(command,6));
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	099b      	lsrs	r3, r3, #6
 8000348:	b2db      	uxtb	r3, r3
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	b2db      	uxtb	r3, r3
 8000350:	461a      	mov	r2, r3
 8000352:	2103      	movs	r1, #3
 8000354:	2000      	movs	r0, #0
 8000356:	f000 fa0d 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(command,7));
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	09db      	lsrs	r3, r3, #7
 800035e:	b2db      	uxtb	r3, r3
 8000360:	461a      	mov	r2, r3
 8000362:	2104      	movs	r1, #4
 8000364:	2000      	movs	r0, #0
 8000366:	f000 fa05 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN,GPIO_HIGH);
 800036a:	2201      	movs	r2, #1
 800036c:	2106      	movs	r1, #6
 800036e:	2000      	movs	r0, #0
 8000370:	f000 fa00 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN, GPIO_LOW);
 8000374:	2200      	movs	r2, #0
 8000376:	2106      	movs	r1, #6
 8000378:	2000      	movs	r0, #0
 800037a:	f000 f9fb 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(command,0));
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	461a      	mov	r2, r3
 8000388:	2101      	movs	r1, #1
 800038a:	2000      	movs	r0, #0
 800038c:	f000 f9f2 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(command,1));
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	085b      	lsrs	r3, r3, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	f003 0301 	and.w	r3, r3, #1
 800039a:	b2db      	uxtb	r3, r3
 800039c:	461a      	mov	r2, r3
 800039e:	2102      	movs	r1, #2
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 f9e7 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(command,2));
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	2103      	movs	r1, #3
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 f9dc 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(command,3));
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	2104      	movs	r1, #4
 80003cc:	2000      	movs	r0, #0
 80003ce:	f000 f9d1 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN, GPIO_HIGH);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2106      	movs	r1, #6
 80003d6:	2000      	movs	r0, #0
 80003d8:	f000 f9cc 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN, GPIO_LOW);
 80003dc:	2200      	movs	r2, #0
 80003de:	2106      	movs	r1, #6
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f9c7 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	/* End of your code !*/

}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <LCD_SendData>:

static void LCD_SendData(u8 character)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
	/* Add your code here */
	GPIO_voidSetPinValue(RS,GPIO_HIGH);
 80003f8:	2201      	movs	r2, #1
 80003fa:	2105      	movs	r1, #5
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f9b9 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(character,4));
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	091b      	lsrs	r3, r3, #4
 8000406:	b2db      	uxtb	r3, r3
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	b2db      	uxtb	r3, r3
 800040e:	461a      	mov	r2, r3
 8000410:	2101      	movs	r1, #1
 8000412:	2000      	movs	r0, #0
 8000414:	f000 f9ae 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(character,5));
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	095b      	lsrs	r3, r3, #5
 800041c:	b2db      	uxtb	r3, r3
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	b2db      	uxtb	r3, r3
 8000424:	461a      	mov	r2, r3
 8000426:	2102      	movs	r1, #2
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f9a3 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(character,6));
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	099b      	lsrs	r3, r3, #6
 8000432:	b2db      	uxtb	r3, r3
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	b2db      	uxtb	r3, r3
 800043a:	461a      	mov	r2, r3
 800043c:	2103      	movs	r1, #3
 800043e:	2000      	movs	r0, #0
 8000440:	f000 f998 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(character,7));
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	09db      	lsrs	r3, r3, #7
 8000448:	b2db      	uxtb	r3, r3
 800044a:	461a      	mov	r2, r3
 800044c:	2104      	movs	r1, #4
 800044e:	2000      	movs	r0, #0
 8000450:	f000 f990 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN,GPIO_HIGH);
 8000454:	2201      	movs	r2, #1
 8000456:	2106      	movs	r1, #6
 8000458:	2000      	movs	r0, #0
 800045a:	f000 f98b 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN,GPIO_LOW);
 800045e:	2200      	movs	r2, #0
 8000460:	2106      	movs	r1, #6
 8000462:	2000      	movs	r0, #0
 8000464:	f000 f986 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(LCD_PIN_1,READBIT(character,0));
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	2101      	movs	r1, #1
 8000474:	2000      	movs	r0, #0
 8000476:	f000 f97d 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_2,READBIT(character,1));
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	085b      	lsrs	r3, r3, #1
 800047e:	b2db      	uxtb	r3, r3
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	b2db      	uxtb	r3, r3
 8000486:	461a      	mov	r2, r3
 8000488:	2102      	movs	r1, #2
 800048a:	2000      	movs	r0, #0
 800048c:	f000 f972 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_3,READBIT(character,2));
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	089b      	lsrs	r3, r3, #2
 8000494:	b2db      	uxtb	r3, r3
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	2103      	movs	r1, #3
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 f967 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_PIN_4,READBIT(character,3));
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	08db      	lsrs	r3, r3, #3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	2104      	movs	r1, #4
 80004b6:	2000      	movs	r0, #0
 80004b8:	f000 f95c 	bl	8000774 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(EN,GPIO_HIGH);
 80004bc:	2201      	movs	r2, #1
 80004be:	2106      	movs	r1, #6
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 f957 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	GPIO_voidSetPinValue(EN,GPIO_LOW);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2106      	movs	r1, #6
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 f952 	bl	8000774 <GPIO_voidSetPinValue>
	// _delay_ms(1);
	/* End of your code !*/
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LCD_GoTo>:

void LCD_GoTo(u8 line, u8 column)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71bb      	strb	r3, [r7, #6]
	u8 address = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]
	/* Calculate address in DDRAM */
	switch(line){
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	d819      	bhi.n	8000526 <LCD_GoTo+0x4e>
 80004f2:	a201      	add	r2, pc, #4	; (adr r2, 80004f8 <LCD_GoTo+0x20>)
 80004f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f8:	08000509 	.word	0x08000509
 80004fc:	0800050f 	.word	0x0800050f
 8000500:	08000517 	.word	0x08000517
 8000504:	0800051f 	.word	0x0800051f
		case 0: address = (column); break;;
 8000508:	79bb      	ldrb	r3, [r7, #6]
 800050a:	73fb      	strb	r3, [r7, #15]
 800050c:	e00b      	b.n	8000526 <LCD_GoTo+0x4e>
		case 1: address = (column+0x40); break;;
 800050e:	79bb      	ldrb	r3, [r7, #6]
 8000510:	3340      	adds	r3, #64	; 0x40
 8000512:	73fb      	strb	r3, [r7, #15]
 8000514:	e007      	b.n	8000526 <LCD_GoTo+0x4e>
		case 2: address = (column+0x14); break;;
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	3314      	adds	r3, #20
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e003      	b.n	8000526 <LCD_GoTo+0x4e>
		case 3: address = (column+0x54); break;;
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	3354      	adds	r3, #84	; 0x54
 8000522:	73fb      	strb	r3, [r7, #15]
 8000524:	bf00      	nop
	}
	LCD_SendCommand(address|(0x80));
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fee8 	bl	8000304 <LCD_SendCommand>
	/* Send address to LCD */

	/* End of your code !*/

}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <LCD_writeNumber>:
		}
	}
}
*/
void LCD_writeNumber(s32 num)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	u8 str[20];
	u8 i=0;
 8000544:	2300      	movs	r3, #0
 8000546:	77fb      	strb	r3, [r7, #31]
	s8 j;
	if(num==0)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <LCD_writeNumber+0x1a>
	{
		LCD_SendChar('0');
 800054e:	2030      	movs	r0, #48	; 0x30
 8000550:	f7ff fecb 	bl	80002ea <LCD_SendChar>
 8000554:	e043      	b.n	80005de <LCD_writeNumber+0xa2>
		return;
	}
	if(num<0)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	da25      	bge.n	80005a8 <LCD_writeNumber+0x6c>
	{
		LCD_SendChar('-');
 800055c:	202d      	movs	r0, #45	; 0x2d
 800055e:	f7ff fec4 	bl	80002ea <LCD_SendChar>
		num=num*(-1);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	425b      	negs	r3, r3
 8000566:	607b      	str	r3, [r7, #4]
	}
	while(num)
 8000568:	e01e      	b.n	80005a8 <LCD_writeNumber+0x6c>
	{
		str[i]=num%10 +'0';
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <LCD_writeNumber+0xa8>)
 800056e:	fb83 1302 	smull	r1, r3, r3, r2
 8000572:	1099      	asrs	r1, r3, #2
 8000574:	17d3      	asrs	r3, r2, #31
 8000576:	1ac9      	subs	r1, r1, r3
 8000578:	460b      	mov	r3, r1
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	440b      	add	r3, r1
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	1ad1      	subs	r1, r2, r3
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	7ffb      	ldrb	r3, [r7, #31]
 8000586:	3230      	adds	r2, #48	; 0x30
 8000588:	b2d2      	uxtb	r2, r2
 800058a:	3320      	adds	r3, #32
 800058c:	443b      	add	r3, r7
 800058e:	f803 2c18 	strb.w	r2, [r3, #-24]
		i++;
 8000592:	7ffb      	ldrb	r3, [r7, #31]
 8000594:	3301      	adds	r3, #1
 8000596:	77fb      	strb	r3, [r7, #31]
		num=num/10;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <LCD_writeNumber+0xa8>)
 800059c:	fb82 1203 	smull	r1, r2, r2, r3
 80005a0:	1092      	asrs	r2, r2, #2
 80005a2:	17db      	asrs	r3, r3, #31
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	607b      	str	r3, [r7, #4]
	while(num)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1dd      	bne.n	800056a <LCD_writeNumber+0x2e>
	}
	for(j=i-1;j>=0;j--)
 80005ae:	7ffb      	ldrb	r3, [r7, #31]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	77bb      	strb	r3, [r7, #30]
 80005b6:	e00e      	b.n	80005d6 <LCD_writeNumber+0x9a>
	{
		LCD_SendChar(str[j]);
 80005b8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80005bc:	3320      	adds	r3, #32
 80005be:	443b      	add	r3, r7
 80005c0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fe90 	bl	80002ea <LCD_SendChar>
	for(j=i-1;j>=0;j--)
 80005ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	3b01      	subs	r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	77bb      	strb	r3, [r7, #30]
 80005d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	daec      	bge.n	80005b8 <LCD_writeNumber+0x7c>
	}
}
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	66666667 	.word	0x66666667

080005e8 <GPIO_voidSetPinDirection>:

#include "GPIO_interface.h"
#include "GPIO_private.h"

void	GPIO_voidSetPinDirection(u8 port, u8 pin, u8 Direction)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	460b      	mov	r3, r1
 80005f4:	71bb      	strb	r3, [r7, #6]
 80005f6:	4613      	mov	r3, r2
 80005f8:	717b      	strb	r3, [r7, #5]
	if(pin<PIN8){
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d852      	bhi.n	80006a6 <GPIO_voidSetPinDirection+0xbe>
		switch(port){
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b02      	cmp	r3, #2
 8000604:	d037      	beq.n	8000676 <GPIO_voidSetPinDirection+0x8e>
 8000606:	2b02      	cmp	r3, #2
 8000608:	f300 80a2 	bgt.w	8000750 <GPIO_voidSetPinDirection+0x168>
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <GPIO_voidSetPinDirection+0x2e>
 8000610:	2b01      	cmp	r3, #1
 8000612:	d018      	beq.n	8000646 <GPIO_voidSetPinDirection+0x5e>
			GPIOC_CRH&=~(0x0F<<((pin-8)*4));
			GPIOC_CRH|=(Direction<<(pin*4));
			break;
		}
	}
}
 8000614:	e09c      	b.n	8000750 <GPIO_voidSetPinDirection+0x168>
			GPIOA_CRL&=~(0x0F<<(pin*4));
 8000616:	4b51      	ldr	r3, [pc, #324]	; (800075c <GPIO_voidSetPinDirection+0x174>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	79ba      	ldrb	r2, [r7, #6]
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	210f      	movs	r1, #15
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	43d2      	mvns	r2, r2
 8000626:	4611      	mov	r1, r2
 8000628:	4a4c      	ldr	r2, [pc, #304]	; (800075c <GPIO_voidSetPinDirection+0x174>)
 800062a:	400b      	ands	r3, r1
 800062c:	6013      	str	r3, [r2, #0]
			GPIOA_CRL|=(Direction<<(pin*4));
 800062e:	4b4b      	ldr	r3, [pc, #300]	; (800075c <GPIO_voidSetPinDirection+0x174>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	7979      	ldrb	r1, [r7, #5]
 8000634:	79ba      	ldrb	r2, [r7, #6]
 8000636:	0092      	lsls	r2, r2, #2
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4a47      	ldr	r2, [pc, #284]	; (800075c <GPIO_voidSetPinDirection+0x174>)
 8000640:	430b      	orrs	r3, r1
 8000642:	6013      	str	r3, [r2, #0]
			break;
 8000644:	e084      	b.n	8000750 <GPIO_voidSetPinDirection+0x168>
			GPIOB_CRL&=~(0x0F<<(pin*4));
 8000646:	4b46      	ldr	r3, [pc, #280]	; (8000760 <GPIO_voidSetPinDirection+0x178>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	79ba      	ldrb	r2, [r7, #6]
 800064c:	0092      	lsls	r2, r2, #2
 800064e:	210f      	movs	r1, #15
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	43d2      	mvns	r2, r2
 8000656:	4611      	mov	r1, r2
 8000658:	4a41      	ldr	r2, [pc, #260]	; (8000760 <GPIO_voidSetPinDirection+0x178>)
 800065a:	400b      	ands	r3, r1
 800065c:	6013      	str	r3, [r2, #0]
			GPIOB_CRL|=(Direction<<(pin*4));
 800065e:	4b40      	ldr	r3, [pc, #256]	; (8000760 <GPIO_voidSetPinDirection+0x178>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	7979      	ldrb	r1, [r7, #5]
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a3c      	ldr	r2, [pc, #240]	; (8000760 <GPIO_voidSetPinDirection+0x178>)
 8000670:	430b      	orrs	r3, r1
 8000672:	6013      	str	r3, [r2, #0]
			break;
 8000674:	e06c      	b.n	8000750 <GPIO_voidSetPinDirection+0x168>
			GPIOC_CRL&=~(0x0F<<(pin*4));
 8000676:	4b3b      	ldr	r3, [pc, #236]	; (8000764 <GPIO_voidSetPinDirection+0x17c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	79ba      	ldrb	r2, [r7, #6]
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	210f      	movs	r1, #15
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	43d2      	mvns	r2, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a36      	ldr	r2, [pc, #216]	; (8000764 <GPIO_voidSetPinDirection+0x17c>)
 800068a:	400b      	ands	r3, r1
 800068c:	6013      	str	r3, [r2, #0]
			GPIOC_CRL|=(Direction<<(pin*4));
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <GPIO_voidSetPinDirection+0x17c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	7979      	ldrb	r1, [r7, #5]
 8000694:	79ba      	ldrb	r2, [r7, #6]
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	fa01 f202 	lsl.w	r2, r1, r2
 800069c:	4611      	mov	r1, r2
 800069e:	4a31      	ldr	r2, [pc, #196]	; (8000764 <GPIO_voidSetPinDirection+0x17c>)
 80006a0:	430b      	orrs	r3, r1
 80006a2:	6013      	str	r3, [r2, #0]
			break;
 80006a4:	e054      	b.n	8000750 <GPIO_voidSetPinDirection+0x168>
		switch(port){
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d038      	beq.n	800071e <GPIO_voidSetPinDirection+0x136>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	dc4f      	bgt.n	8000750 <GPIO_voidSetPinDirection+0x168>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <GPIO_voidSetPinDirection+0xd2>
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d019      	beq.n	80006ec <GPIO_voidSetPinDirection+0x104>
}
 80006b8:	e04a      	b.n	8000750 <GPIO_voidSetPinDirection+0x168>
			GPIOA_CRH&=~(0x0F<<((pin-8)*4));
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <GPIO_voidSetPinDirection+0x180>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	3a08      	subs	r2, #8
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	210f      	movs	r1, #15
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	43d2      	mvns	r2, r2
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a26      	ldr	r2, [pc, #152]	; (8000768 <GPIO_voidSetPinDirection+0x180>)
 80006d0:	400b      	ands	r3, r1
 80006d2:	6013      	str	r3, [r2, #0]
			GPIOA_CRH|=(Direction<<(pin*4));
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <GPIO_voidSetPinDirection+0x180>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	7979      	ldrb	r1, [r7, #5]
 80006da:	79ba      	ldrb	r2, [r7, #6]
 80006dc:	0092      	lsls	r2, r2, #2
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a20      	ldr	r2, [pc, #128]	; (8000768 <GPIO_voidSetPinDirection+0x180>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6013      	str	r3, [r2, #0]
			break;
 80006ea:	e031      	b.n	8000750 <GPIO_voidSetPinDirection+0x168>
			GPIOB_CRH&=~(0x0F<<((pin-8)*4));
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <GPIO_voidSetPinDirection+0x184>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	3a08      	subs	r2, #8
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	210f      	movs	r1, #15
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	4611      	mov	r1, r2
 8000700:	4a1a      	ldr	r2, [pc, #104]	; (800076c <GPIO_voidSetPinDirection+0x184>)
 8000702:	400b      	ands	r3, r1
 8000704:	6013      	str	r3, [r2, #0]
			GPIOB_CRH|=(Direction<<(pin*4));
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <GPIO_voidSetPinDirection+0x184>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	7979      	ldrb	r1, [r7, #5]
 800070c:	79ba      	ldrb	r2, [r7, #6]
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	4611      	mov	r1, r2
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <GPIO_voidSetPinDirection+0x184>)
 8000718:	430b      	orrs	r3, r1
 800071a:	6013      	str	r3, [r2, #0]
			break;
 800071c:	e018      	b.n	8000750 <GPIO_voidSetPinDirection+0x168>
			GPIOC_CRH&=~(0x0F<<((pin-8)*4));
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <GPIO_voidSetPinDirection+0x188>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	3a08      	subs	r2, #8
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	210f      	movs	r1, #15
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <GPIO_voidSetPinDirection+0x188>)
 8000734:	400b      	ands	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
			GPIOC_CRH|=(Direction<<(pin*4));
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <GPIO_voidSetPinDirection+0x188>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	7979      	ldrb	r1, [r7, #5]
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	0092      	lsls	r2, r2, #2
 8000742:	fa01 f202 	lsl.w	r2, r1, r2
 8000746:	4611      	mov	r1, r2
 8000748:	4a09      	ldr	r2, [pc, #36]	; (8000770 <GPIO_voidSetPinDirection+0x188>)
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
			break;
 800074e:	bf00      	nop
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40010800 	.word	0x40010800
 8000760:	40010c00 	.word	0x40010c00
 8000764:	40011000 	.word	0x40011000
 8000768:	40010804 	.word	0x40010804
 800076c:	40010c04 	.word	0x40010c04
 8000770:	40011004 	.word	0x40011004

08000774 <GPIO_voidSetPinValue>:

void	GPIO_voidSetPinValue(u8 port, u8 pin, u8 Value)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	460b      	mov	r3, r1
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	4613      	mov	r3, r2
 8000784:	717b      	strb	r3, [r7, #5]
	if(Value==GPIO_HIGH){
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d11e      	bne.n	80007ca <GPIO_voidSetPinValue+0x56>
			switch(port){
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d012      	beq.n	80007b8 <GPIO_voidSetPinValue+0x44>
 8000792:	2b02      	cmp	r3, #2
 8000794:	dc41      	bgt.n	800081a <GPIO_voidSetPinValue+0xa6>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <GPIO_voidSetPinValue+0x2c>
 800079a:	2b01      	cmp	r3, #1
 800079c:	d006      	beq.n	80007ac <GPIO_voidSetPinValue+0x38>
			BITBAND_PERIPH(GPIOB_BSRR,(pin+16))=1;
			//SETBIT(GPIOA_BSRR,pin);

		}
	}*/
}
 800079e:	e03c      	b.n	800081a <GPIO_voidSetPinValue+0xa6>
				 GPIOA_BSRR= 1<<pin;
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	2201      	movs	r2, #1
 80007a4:	409a      	lsls	r2, r3
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <GPIO_voidSetPinValue+0xb0>)
 80007a8:	601a      	str	r2, [r3, #0]
				break;
 80007aa:	e036      	b.n	800081a <GPIO_voidSetPinValue+0xa6>
				 GPIOB_BSRR= 1<<pin;
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	2201      	movs	r2, #1
 80007b0:	409a      	lsls	r2, r3
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <GPIO_voidSetPinValue+0xb4>)
 80007b4:	601a      	str	r2, [r3, #0]
				break;
 80007b6:	e030      	b.n	800081a <GPIO_voidSetPinValue+0xa6>
				if(pin<PIN3){
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d82a      	bhi.n	8000814 <GPIO_voidSetPinValue+0xa0>
					 GPIOC_BSRR= 1<<pin;
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	2201      	movs	r2, #1
 80007c2:	409a      	lsls	r2, r3
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <GPIO_voidSetPinValue+0xb8>)
 80007c6:	601a      	str	r2, [r3, #0]
				break;
 80007c8:	e024      	b.n	8000814 <GPIO_voidSetPinValue+0xa0>
		else if(Value==GPIO_LOW){
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d124      	bne.n	800081a <GPIO_voidSetPinValue+0xa6>
			switch(port){
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d014      	beq.n	8000800 <GPIO_voidSetPinValue+0x8c>
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	dc1f      	bgt.n	800081a <GPIO_voidSetPinValue+0xa6>
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <GPIO_voidSetPinValue+0x70>
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d007      	beq.n	80007f2 <GPIO_voidSetPinValue+0x7e>
}
 80007e2:	e01a      	b.n	800081a <GPIO_voidSetPinValue+0xa6>
				GPIOA_BSRR= 1<<(pin+16);
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	3310      	adds	r3, #16
 80007e8:	2201      	movs	r2, #1
 80007ea:	409a      	lsls	r2, r3
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <GPIO_voidSetPinValue+0xb0>)
 80007ee:	601a      	str	r2, [r3, #0]
				break;
 80007f0:	e013      	b.n	800081a <GPIO_voidSetPinValue+0xa6>
				GPIOB_BSRR= 1<<(pin+16);
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	3310      	adds	r3, #16
 80007f6:	2201      	movs	r2, #1
 80007f8:	409a      	lsls	r2, r3
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <GPIO_voidSetPinValue+0xb4>)
 80007fc:	601a      	str	r2, [r3, #0]
				break;
 80007fe:	e00c      	b.n	800081a <GPIO_voidSetPinValue+0xa6>
				if(pin<PIN3){
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d808      	bhi.n	8000818 <GPIO_voidSetPinValue+0xa4>
					GPIOC_BSRR= 1<<(pin+16);
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	3310      	adds	r3, #16
 800080a:	2201      	movs	r2, #1
 800080c:	409a      	lsls	r2, r3
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <GPIO_voidSetPinValue+0xb8>)
 8000810:	601a      	str	r2, [r3, #0]
				break;
 8000812:	e001      	b.n	8000818 <GPIO_voidSetPinValue+0xa4>
				break;
 8000814:	bf00      	nop
 8000816:	e000      	b.n	800081a <GPIO_voidSetPinValue+0xa6>
				break;
 8000818:	bf00      	nop
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	40010810 	.word	0x40010810
 8000828:	40010c10 	.word	0x40010c10
 800082c:	40011010 	.word	0x40011010

08000830 <GPIO_u8GetPinValue>:

u8 GPIO_u8GetPinValue(u8 port, u8 pin)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
	u8 READ = GPIO_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
	switch(port){
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d01a      	beq.n	8000880 <GPIO_u8GetPinValue+0x50>
 800084a:	2b02      	cmp	r3, #2
 800084c:	dc22      	bgt.n	8000894 <GPIO_u8GetPinValue+0x64>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <GPIO_u8GetPinValue+0x28>
 8000852:	2b01      	cmp	r3, #1
 8000854:	d00a      	beq.n	800086c <GPIO_u8GetPinValue+0x3c>
 8000856:	e01d      	b.n	8000894 <GPIO_u8GetPinValue+0x64>
	case PORTA:
		READ=READBIT(GPIOA_IDR,pin);
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <GPIO_u8GetPinValue+0x70>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	fa22 f303 	lsr.w	r3, r2, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	73fb      	strb	r3, [r7, #15]
		break;
 800086a:	e013      	b.n	8000894 <GPIO_u8GetPinValue+0x64>
	case PORTB:
		READ=READBIT(GPIOB_IDR,pin);
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <GPIO_u8GetPinValue+0x74>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	fa22 f303 	lsr.w	r3, r2, r3
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	73fb      	strb	r3, [r7, #15]
		break;
 800087e:	e009      	b.n	8000894 <GPIO_u8GetPinValue+0x64>
	case PORTC:

			READ=READBIT(GPIOC_IDR,pin);
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <GPIO_u8GetPinValue+0x78>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	fa22 f303 	lsr.w	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]

		break;
 8000892:	bf00      	nop
	}
	return READ;
 8000894:	7bfb      	ldrb	r3, [r7, #15]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40010808 	.word	0x40010808
 80008a4:	40010c08 	.word	0x40010c08
 80008a8:	40011008 	.word	0x40011008

080008ac <delay_ms>:
}
u16 GPIO_u16GetPortValue(u8 port){
	return GPIOC_IDR;
}
void delay_ms (u32 d)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	volatile u32 i=0,c=(d*350);
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80008be:	fb02 f303 	mul.w	r3, r2, r3
 80008c2:	60bb      	str	r3, [r7, #8]
	for(i=0 ;i<c ;i++);
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e002      	b.n	80008d0 <delay_ms+0x24>
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3301      	adds	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d3f8      	bcc.n	80008ca <delay_ms+0x1e>
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <MRCC_voidInit>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void MRCC_voidInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0


		#if 	CLOCK_TYPE == HSI
		/* internal 8 MHZ RC oscillator 			*/
		/*	HSI clock enable						*/
	          SETBIT(MRCC->CR,0);
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MRCC_voidInit+0x5c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <MRCC_voidInit+0x5c>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]
	          /*	HSI Ready Flag					*/
	          while(!READBIT(MRCC->CR,1)){}
 80008f4:	bf00      	nop
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MRCC_voidInit+0x5c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <MRCC_voidInit+0x12>

				/*HSI selected as system clock		*/
				CLRBIT(MRCC->CFGR,0);
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MRCC_voidInit+0x5c>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <MRCC_voidInit+0x5c>)
 8000908:	f023 0301 	bic.w	r3, r3, #1
 800090c:	6053      	str	r3, [r2, #4]
				CLRBIT(MRCC->CFGR,1);
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MRCC_voidInit+0x5c>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <MRCC_voidInit+0x5c>)
 8000914:	f023 0302 	bic.w	r3, r3, #2
 8000918:	6053      	str	r3, [r2, #4]
				/*	HSI Ready Flag		SWS			*/
				if((!READBIT(MRCC->CR,2))&&(!READBIT(MRCC->CR,3)))
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MRCC_voidInit+0x5c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <MRCC_voidInit+0x46>
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MRCC_voidInit+0x5c>)
 8000928:	681b      	ldr	r3, [r3, #0]
			#error		"Wrong Clock System type congiguration!"

		#endif
		/*FOR Clock Security System				*/
		#if		CLOCK_SECURITY_SYSTEM	==	OFF
			    CLRBIT(MRCC->CR,19);
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <MRCC_voidInit+0x5c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <MRCC_voidInit+0x5c>)
 8000930:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000934:	6013      	str	r3, [r2, #0]
			    SETBIT(MRCC->CR,19);
		#else
				#warning	"Wrong clock security system configuration choice!"
		#endif

}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <MRCC_enumSetPeripheralClock>:

ERROR_status MRCC_enumSetPeripheralClock(u8 Copy_u8PeripheralBus , u8 Copy_u8PeripheralName , u8 Copy_u8PeripheralState )
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	460b      	mov	r3, r1
 8000950:	71bb      	strb	r3, [r7, #6]
 8000952:	4613      	mov	r3, r2
 8000954:	717b      	strb	r3, [r7, #5]
	ERROR_status LOC_enumstate = E_NOK ;
 8000956:	2301      	movs	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
	switch( Copy_u8PeripheralState )
 800095a:	797b      	ldrb	r3, [r7, #5]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d063      	beq.n	8000a28 <MRCC_enumSetPeripheralClock+0xe4>
 8000960:	2b03      	cmp	r3, #3
 8000962:	dc7e      	bgt.n	8000a62 <MRCC_enumSetPeripheralClock+0x11e>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d002      	beq.n	800096e <MRCC_enumSetPeripheralClock+0x2a>
 8000968:	2b02      	cmp	r3, #2
 800096a:	d02d      	beq.n	80009c8 <MRCC_enumSetPeripheralClock+0x84>
 800096c:	e079      	b.n	8000a62 <MRCC_enumSetPeripheralClock+0x11e>
	{
		case	RCC_ENABLE 	:
							switch( Copy_u8PeripheralBus )
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d01c      	beq.n	80009ae <MRCC_enumSetPeripheralClock+0x6a>
 8000974:	2b03      	cmp	r3, #3
 8000976:	dc25      	bgt.n	80009c4 <MRCC_enumSetPeripheralClock+0x80>
 8000978:	2b01      	cmp	r3, #1
 800097a:	d002      	beq.n	8000982 <MRCC_enumSetPeripheralClock+0x3e>
 800097c:	2b02      	cmp	r3, #2
 800097e:	d00b      	beq.n	8000998 <MRCC_enumSetPeripheralClock+0x54>
							{
								case AHB  :	SETBIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
								case APB1 :	SETBIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
								case APB2 : SETBIT( MRCC->APB2ENR , Copy_u8PeripheralName  );break;
								default	  :	break;
 8000980:	e020      	b.n	80009c4 <MRCC_enumSetPeripheralClock+0x80>
								case AHB  :	SETBIT( MRCC->AHBENR  , Copy_u8PeripheralName  );break;
 8000982:	4b3b      	ldr	r3, [pc, #236]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	2101      	movs	r1, #1
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	4611      	mov	r1, r2
 8000990:	4a37      	ldr	r2, [pc, #220]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000992:	430b      	orrs	r3, r1
 8000994:	6153      	str	r3, [r2, #20]
 8000996:	e016      	b.n	80009c6 <MRCC_enumSetPeripheralClock+0x82>
								case APB1 :	SETBIT( MRCC->APB1ENR , Copy_u8PeripheralName  );break;
 8000998:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 800099a:	69db      	ldr	r3, [r3, #28]
 800099c:	79ba      	ldrb	r2, [r7, #6]
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a32      	ldr	r2, [pc, #200]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 80009a8:	430b      	orrs	r3, r1
 80009aa:	61d3      	str	r3, [r2, #28]
 80009ac:	e00b      	b.n	80009c6 <MRCC_enumSetPeripheralClock+0x82>
								case APB2 : SETBIT( MRCC->APB2ENR , Copy_u8PeripheralName  );break;
 80009ae:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	79ba      	ldrb	r2, [r7, #6]
 80009b4:	2101      	movs	r1, #1
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 80009be:	430b      	orrs	r3, r1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	e000      	b.n	80009c6 <MRCC_enumSetPeripheralClock+0x82>
								default	  :	break;
 80009c4:	bf00      	nop
							}
							break;
 80009c6:	e04c      	b.n	8000a62 <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_DISABLE :
							switch( Copy_u8PeripheralBus )
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d01e      	beq.n	8000a0c <MRCC_enumSetPeripheralClock+0xc8>
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	dc28      	bgt.n	8000a24 <MRCC_enumSetPeripheralClock+0xe0>
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d002      	beq.n	80009dc <MRCC_enumSetPeripheralClock+0x98>
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d00c      	beq.n	80009f4 <MRCC_enumSetPeripheralClock+0xb0>
								case APB1 :	CLRBIT( MRCC->APB1ENR  , Copy_u8PeripheralName  );
								break;
								case APB2 : CLRBIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
								break;
								default	  :
								break;
 80009da:	e023      	b.n	8000a24 <MRCC_enumSetPeripheralClock+0xe0>
								case AHB  :	CLRBIT( MRCC->AHBENR  , Copy_u8PeripheralName  );
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	79ba      	ldrb	r2, [r7, #6]
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	43d2      	mvns	r2, r2
 80009ea:	4611      	mov	r1, r2
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 80009ee:	400b      	ands	r3, r1
 80009f0:	6153      	str	r3, [r2, #20]
								break;
 80009f2:	e018      	b.n	8000a26 <MRCC_enumSetPeripheralClock+0xe2>
								case APB1 :	CLRBIT( MRCC->APB1ENR  , Copy_u8PeripheralName  );
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	79ba      	ldrb	r2, [r7, #6]
 80009fa:	2101      	movs	r1, #1
 80009fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000a00:	43d2      	mvns	r2, r2
 8000a02:	4611      	mov	r1, r2
 8000a04:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000a06:	400b      	ands	r3, r1
 8000a08:	61d3      	str	r3, [r2, #28]
								break;
 8000a0a:	e00c      	b.n	8000a26 <MRCC_enumSetPeripheralClock+0xe2>
								case APB2 : CLRBIT( MRCC->APB2ENR  , Copy_u8PeripheralName  );
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	79ba      	ldrb	r2, [r7, #6]
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000a1e:	400b      	ands	r3, r1
 8000a20:	6193      	str	r3, [r2, #24]
								break;
 8000a22:	e000      	b.n	8000a26 <MRCC_enumSetPeripheralClock+0xe2>
								break;
 8000a24:	bf00      	nop
							}
							break;
 8000a26:	e01c      	b.n	8000a62 <MRCC_enumSetPeripheralClock+0x11e>
		case	RCC_RESET	:
							switch( Copy_u8PeripheralBus )
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d002      	beq.n	8000a34 <MRCC_enumSetPeripheralClock+0xf0>
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d00b      	beq.n	8000a4a <MRCC_enumSetPeripheralClock+0x106>
							{
								case APB1 :	SETBIT( MRCC->APB1RSTR , Copy_u8PeripheralName  );break;
								case APB2 : SETBIT( MRCC->APB2RSTR , Copy_u8PeripheralName  );break;
								default	  :	break;
 8000a32:	e015      	b.n	8000a60 <MRCC_enumSetPeripheralClock+0x11c>
								case APB1 :	SETBIT( MRCC->APB1RSTR , Copy_u8PeripheralName  );break;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000a44:	430b      	orrs	r3, r1
 8000a46:	6113      	str	r3, [r2, #16]
 8000a48:	e00a      	b.n	8000a60 <MRCC_enumSetPeripheralClock+0x11c>
								case APB2 : SETBIT( MRCC->APB2RSTR , Copy_u8PeripheralName  );break;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	79ba      	ldrb	r2, [r7, #6]
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <MRCC_enumSetPeripheralClock+0x12c>)
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	60d3      	str	r3, [r2, #12]
 8000a5e:	bf00      	nop
							}
							break;
 8000a60:	bf00      	nop
	}
	return LOC_enumstate;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <SysTick_Handler>:
		}
		return OK;

}
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if(APPcbf!=NULL_PTR){
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SysTick_Handler+0x18>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <SysTick_Handler+0x12>
		APPcbf();
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <SysTick_Handler+0x18>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4798      	blx	r3
		}
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000001c 	.word	0x2000001c

08000a90 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	MRCC_voidInit();
 8000a96:	f7ff ff25 	bl	80008e4 <MRCC_voidInit>
		MRCC_enumSetPeripheralClock(APB2, GPIOA, RCC_ENABLE);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	f7ff ff50 	bl	8000944 <MRCC_enumSetPeripheralClock>
		MRCC_enumSetPeripheralClock(APB2, GPIOB, RCC_ENABLE);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f7ff ff4b 	bl	8000944 <MRCC_enumSetPeripheralClock>
		GPIO_voidSetPinDirection(PORTA, PIN7, GPIO_OUTPUT_10MHZ_PP);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2107      	movs	r1, #7
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff fd98 	bl	80005e8 <GPIO_voidSetPinDirection>
		GPIO_voidSetPinValue(PORTA, PIN7, GPIO_HIGH);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2107      	movs	r1, #7
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fe59 	bl	8000774 <GPIO_voidSetPinValue>
		LCD_Init();
 8000ac2:	f7ff fbd3 	bl	800026c <LCD_Init>
		KeyPad_Init();
 8000ac6:	f7ff fb53 	bl	8000170 <KeyPad_Init>
		LCD_GoTo(0,0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fd03 	bl	80004d8 <LCD_GoTo>
		LCD_SendChar('A');
 8000ad2:	2041      	movs	r0, #65	; 0x41
 8000ad4:	f7ff fc09 	bl	80002ea <LCD_SendChar>
	    /* Loop forever */
		for(;;){
			//delay_ms(500);

			LCD_GoTo(1, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fcfc 	bl	80004d8 <LCD_GoTo>
			u8 c = KeyPad_GetKey();
 8000ae0:	f7ff fb74 	bl	80001cc <KeyPad_GetKey>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
			if(c!='N'){
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b4e      	cmp	r3, #78	; 0x4e
 8000aec:	d0f4      	beq.n	8000ad8 <main+0x48>

			LCD_writeNumber(c);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fd23 	bl	800053c <LCD_writeNumber>
		for(;;){
 8000af6:	e7ef      	b.n	8000ad8 <main+0x48>

08000af8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000afa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000afc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b26:	f000 f811 	bl	8000b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff ffb1 	bl	8000a90 <main>

08000b2e <LoopForever>:

LoopForever:
  b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   r0, =_estack
 8000b30:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b3c:	08000bc4 	.word	0x08000bc4
  ldr r2, =_sbss
 8000b40:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b44:	20000020 	.word	0x20000020

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>
	...

08000b4c <__libc_init_array>:
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	2600      	movs	r6, #0
 8000b50:	4d0c      	ldr	r5, [pc, #48]	; (8000b84 <__libc_init_array+0x38>)
 8000b52:	4c0d      	ldr	r4, [pc, #52]	; (8000b88 <__libc_init_array+0x3c>)
 8000b54:	1b64      	subs	r4, r4, r5
 8000b56:	10a4      	asrs	r4, r4, #2
 8000b58:	42a6      	cmp	r6, r4
 8000b5a:	d109      	bne.n	8000b70 <__libc_init_array+0x24>
 8000b5c:	f000 f81a 	bl	8000b94 <_init>
 8000b60:	2600      	movs	r6, #0
 8000b62:	4d0a      	ldr	r5, [pc, #40]	; (8000b8c <__libc_init_array+0x40>)
 8000b64:	4c0a      	ldr	r4, [pc, #40]	; (8000b90 <__libc_init_array+0x44>)
 8000b66:	1b64      	subs	r4, r4, r5
 8000b68:	10a4      	asrs	r4, r4, #2
 8000b6a:	42a6      	cmp	r6, r4
 8000b6c:	d105      	bne.n	8000b7a <__libc_init_array+0x2e>
 8000b6e:	bd70      	pop	{r4, r5, r6, pc}
 8000b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b74:	4798      	blx	r3
 8000b76:	3601      	adds	r6, #1
 8000b78:	e7ee      	b.n	8000b58 <__libc_init_array+0xc>
 8000b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7e:	4798      	blx	r3
 8000b80:	3601      	adds	r6, #1
 8000b82:	e7f2      	b.n	8000b6a <__libc_init_array+0x1e>
 8000b84:	08000bbc 	.word	0x08000bbc
 8000b88:	08000bbc 	.word	0x08000bbc
 8000b8c:	08000bbc 	.word	0x08000bbc
 8000b90:	08000bc0 	.word	0x08000bc0

08000b94 <_init>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr

08000ba0 <_fini>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	bf00      	nop
 8000ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ba6:	bc08      	pop	{r3}
 8000ba8:	469e      	mov	lr, r3
 8000baa:	4770      	bx	lr
